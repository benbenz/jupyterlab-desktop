"use strict";
(self["webpackChunksos_completer"] = self["webpackChunksos_completer"] || []).push([["lib_index_js"],{

/***/ "./lib/connector.js":
/*!**************************!*\
  !*** ./lib/connector.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CompletionConnector": () => (/* binding */ CompletionConnector)
/* harmony export */ });
/* harmony import */ var _jupyterlab_statedb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/statedb */ "webpack/sharing/consume/default/@jupyterlab/statedb");
/* harmony import */ var _jupyterlab_statedb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_statedb__WEBPACK_IMPORTED_MODULE_0__);
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
// Modified from jupyterlab/packages/completer/src/connector.ts

/**
 * A multi-connector connector for completion handlers.
 */
class CompletionConnector extends _jupyterlab_statedb__WEBPACK_IMPORTED_MODULE_0__.DataConnector {
    /**
     * Create a new connector for completion requests.
     *
     * @param connectors - Connectors to request matches from, ordered by metadata preference (descending).
     */
    constructor(connectors) {
        super();
        this._connectors = connectors;
    }
    /**
     * Fetch completion requests.
     *
     * @param request - The completion request text and details.
     * @returns Completion reply
     */
    fetch(request) {
        return Promise.all(this._connectors.map((connector) => connector.fetch(request))).then((replies) => {
            const definedReplies = replies.filter((reply) => !!reply);
            return Private.mergeReplies(definedReplies);
        });
    }
}
/**
 * A namespace for private functionality.
 */
var Private;
(function (Private) {
    /**
     * Merge results from multiple connectors.
     *
     * @param replies - Array of completion results.
     * @returns IReply with a superset of all matches.
     */
    function mergeReplies(replies) {
        // Filter replies with matches.
        const repliesWithMatches = replies.filter((rep) => rep.matches.length > 0);
        // If no replies contain matches, return an empty IReply.
        if (repliesWithMatches.length === 0) {
            return replies[0];
        }
        // If only one reply contains matches, return it.
        if (repliesWithMatches.length === 1) {
            return repliesWithMatches[0];
        }
        // Collect unique matches from all replies.
        const matches = new Set();
        repliesWithMatches.forEach((reply) => {
            reply.matches.forEach((match) => matches.add(match));
        });
        // Note that the returned metadata field only contains items in the first member of repliesWithMatches.
        return Object.assign(Object.assign({}, repliesWithMatches[0]), { matches: [...matches] });
    }
    Private.mergeReplies = mergeReplies;
})(Private || (Private = {}));


/***/ }),

/***/ "./lib/customconnector.js":
/*!********************************!*\
  !*** ./lib/customconnector.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CustomConnector": () => (/* binding */ CustomConnector)
/* harmony export */ });
/* harmony import */ var _jupyterlab_statedb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/statedb */ "webpack/sharing/consume/default/@jupyterlab/statedb");
/* harmony import */ var _jupyterlab_statedb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_statedb__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _dictionnary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dictionnary */ "./lib/dictionnary.js");
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.


/**
 * A custom connector for completion handlers.
 */
class CustomConnector extends _jupyterlab_statedb__WEBPACK_IMPORTED_MODULE_0__.DataConnector {
    /**
     * Create a new custom connector for completion requests.
     *
     * @param options - The instatiation options for the custom connector.
     */
    constructor(options, notebooks, consoles) {
        super();
        this._editor = options.editor;
        this._options = options;
        this._notebooks = notebooks;
        this._consoles = consoles;
    }
    /**
     * Fetch completion requests.
     *
     * @param request - The completion request text and details.
     * @returns Completion reply
     */
    fetch(request) {
        if (!this._editor) {
            return Promise.reject('No editor');
        }
        return new Promise((resolve) => {
            resolve(Private.completionHint(this._editor, this._options, this._notebooks, this._consoles));
        });
    }
}
/**
 * A namespace for Private functionality.
 */
var Private;
(function (Private) {
    /**
     * Get a list of mocked completion hints.
     *
     * @param editor Editor
     * @returns Completion reply
     */
    function completionHint(editor, options, notebooks, consoles) {
        // Find the token at the cursor
        const cursor = editor.getCursorPosition();
        const token = editor.getTokenForPosition(cursor);
        let cur_kernel = options.sessionCtx.kernelPreference.name ||
            options.sessionCtx.kernelDisplayName;
        cur_kernel = cur_kernel.toLowerCase();
        if (cur_kernel === "sos") {
            // SoS mode: kernel is at the cell level 
            let cell = notebooks.activeCell;
            let cellk = cell.model.metadata.get("kernel");
            if (cellk)
                cur_kernel = cellk.toString().toLowerCase();
        }
        // Create a list of matching tokens.
        // const tokenList = [
        //   { value: token.value + 'Magic', offset: token.offset, type: 'magic' },
        //   { value: token.value + 'Science', offset: token.offset, type: 'science' },
        //   { value: token.value + 'Neither', offset: token.offset },
        // ];
        if (!_dictionnary__WEBPACK_IMPORTED_MODULE_1__["default"][cur_kernel]) {
            return {
                start: token.offset,
                end: token.offset + token.value.length,
                matches: [],
                metadata: {},
            };
        }
        let version = 'all';
        //TODO: add version handling from atop
        if (cur_kernel === 'stata')
            version = 'v17';
        const tokenList = _dictionnary__WEBPACK_IMPORTED_MODULE_1__["default"][cur_kernel][version].tokenList;
        let tokensearch = token.value.toLowerCase();
        // Only choose the ones that have a non-empty type field, which are likely to be of interest.
        //const completionList = tokenList.filter((t:any) => t.type && t.value.indexOf(tokensearch)!==-1).map((t:any) => t.value);
        const filteredList = tokenList.filter((t) => t.value.indexOf(tokensearch) === 0);
        const completionList = filteredList.map((t) => t.value);
        const typesList = filteredList.map((t) => { return { type: t.type, text: t.value }; });
        console.log(completionList);
        // Remove duplicate completions from the list
        const matches = Array.from(new Set(completionList));
        return {
            start: token.offset,
            end: token.offset + token.value.length,
            matches,
            metadata: { _jupyter_types_experimental: typesList },
        };
    }
    Private.completionHint = completionHint;
})(Private || (Private = {}));


/***/ }),

/***/ "./lib/dictionnary.js":
/*!****************************!*\
  !*** ./lib/dictionnary.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const dictionnary = {
    stata: {
        v17: {
            tokenList: [
                { value: 'bayes', type: 'command', options: [] },
                { value: 'bayesmh', type: 'command', options: [] },
                { value: 'bayesmh evaluators', type: 'command', options: [] },
                { value: 'bayesgraph', type: 'command', options: [] },
                { value: 'bayesstats', type: 'command', options: [] },
                { value: 'bayesstats ess', type: 'command', options: [] },
                { value: 'bayesstats grubin', type: 'command', options: [] },
                { value: 'bayesstats ic', type: 'command', options: [] },
                { value: 'bayesstats ppvalues', type: 'command', options: [] },
                { value: 'bayesstats summary', type: 'command', options: [] },
                { value: 'bayestest', type: 'command', options: [] },
                { value: 'bayestest interval', type: 'command', options: [] },
                { value: 'bayestest model', type: 'command', options: [] },
                { value: 'bayespredict', type: 'command', options: [] },
                { value: 'set clevel', type: 'command', options: [] },
                { value: 'bayes: betareg', type: 'command', options: [] },
                { value: 'bayes: binreg', type: 'command', options: [] },
                { value: 'bayes: biprobit', type: 'command', options: [] },
                { value: 'bayes: clogit', type: 'command', options: [] },
                { value: 'bayes: cloglog', type: 'command', options: [] },
                { value: 'bayes: dsge', type: 'command', options: [] },
                { value: 'bayes: dsgenl', type: 'command', options: [] },
                { value: 'bayes: fracreg', type: 'command', options: [] },
                { value: 'bayes: glm', type: 'command', options: [] },
                { value: 'bayes: gnbreg', type: 'command', options: [] },
                { value: 'bayes: heckman', type: 'command', options: [] },
                { value: 'bayes: heckoprobit', type: 'command', options: [] },
                { value: 'bayes: heckprobit', type: 'command', options: [] },
                { value: 'bayes: hetoprobit', type: 'command', options: [] },
                { value: 'bayes: hetprobit', type: 'command', options: [] },
                { value: 'bayes: hetregress', type: 'command', options: [] },
                { value: 'bayes: intreg', type: 'command', options: [] },
                { value: 'bayes: logistic', type: 'command', options: [] },
                { value: 'bayes: logit', type: 'command', options: [] },
                { value: 'bayes: mecloglog', type: 'command', options: [] },
                { value: 'bayes: meglm', type: 'command', options: [] },
                { value: 'bayes: meintreg', type: 'command', options: [] },
                { value: 'bayes: melogit', type: 'command', options: [] },
                { value: 'bayes: menbreg', type: 'command', options: [] },
                { value: 'bayes: meologit', type: 'command', options: [] },
                { value: 'bayes: meoprobit', type: 'command', options: [] },
                { value: 'bayes: mepoisson', type: 'command', options: [] },
                { value: 'bayes: meprobit', type: 'command', options: [] },
                { value: 'bayes: mestreg', type: 'command', options: [] },
                { value: 'bayes: metobit', type: 'command', options: [] },
                { value: 'bayes: mixed', type: 'command', options: [] },
                { value: 'bayes: mlogit', type: 'command', options: [] },
                { value: 'bayes: mprobit', type: 'command', options: [] },
                { value: 'bayes: mvreg', type: 'command', options: [] },
                { value: 'bayes: nbreg', type: 'command', options: [] },
                { value: 'bayes: ologit', type: 'command', options: [] },
                { value: 'bayes: oprobit', type: 'command', options: [] },
                { value: 'bayes: poisson', type: 'command', options: [] },
                { value: 'bayes: probit', type: 'command', options: [] },
                { value: 'bayes: regress', type: 'command', options: [] },
                { value: 'bayes: streg', type: 'command', options: [] },
                { value: 'bayes: tnbreg', type: 'command', options: [] },
                { value: 'bayes: tobit', type: 'command', options: [] },
                { value: 'bayes: tpoisson', type: 'command', options: [] },
                { value: 'bayes: truncreg', type: 'command', options: [] },
                { value: 'bayes: var', type: 'command', options: [] },
                { value: 'bayesvarstable', type: 'command', options: [] },
                { value: 'bayesfcast', type: 'command', options: [] },
                { value: 'bayesfcast compute', type: 'command', options: [] },
                { value: 'bayesfcast graph', type: 'command', options: [] },
                { value: 'bayesirf', type: 'command', options: [] },
                { value: 'bayesirf create', type: 'command', options: [] },
                { value: 'bayesirf graph', type: 'command', options: [] },
                { value: 'bayesirf cgraph', type: 'command', options: [] },
                { value: 'bayesirf ograph', type: 'command', options: [] },
                { value: 'bayesirf table', type: 'command', options: [] },
                { value: 'bayesirf ctable', type: 'command', options: [] },
                { value: 'bayes: xtlogit', type: 'command', options: [] },
                { value: 'bayes: xtmlogit', type: 'command', options: [] },
                { value: 'bayes: xtnbreg', type: 'command', options: [] },
                { value: 'bayes: xtologit', type: 'command', options: [] },
                { value: 'bayes: xtoprobit', type: 'command', options: [] },
                { value: 'bayes: xtpoisson', type: 'command', options: [] },
                { value: 'bayes: xtprobit', type: 'command', options: [] },
                { value: 'bayes: xtreg', type: 'command', options: [] },
                { value: 'bayes: zinb', type: 'command', options: [] },
                { value: 'bayes: ziologit', type: 'command', options: [] },
                { value: 'bayes: zioprobit', type: 'command', options: [] },
                { value: 'bayes: zip', type: 'command', options: [] },
                { value: 'cmchoiceset', type: 'command', options: [] },
                { value: 'cmclogit', type: 'command', options: [] },
                { value: 'cmmixlogit', type: 'command', options: [] },
                { value: 'cmmprobit', type: 'command', options: [] },
                { value: 'cmrologit', type: 'command', options: [] },
                { value: 'cmroprobit', type: 'command', options: [] },
                { value: 'cmsample', type: 'command', options: [] },
                { value: 'cmset', type: 'command', options: [] },
                { value: 'cmsummarize', type: 'command', options: [] },
                { value: 'cmtab', type: 'command', options: [] },
                { value: 'cmxtmixlogit', type: 'command', options: [] },
                { value: 'margins', type: 'command', options: [] },
                { value: 'nlogit', type: 'command', options: [] },
                { value: 'append', type: 'command', options: [] },
                { value: 'assert', type: 'command', options: [] },
                { value: 'assertnested', type: 'command', options: [] },
                { value: 'bcal', type: 'command', options: [] },
                { value: 'by', type: 'command', options: [] },
                { value: 'cd', type: 'command', options: [] },
                { value: 'cf', type: 'command', options: [] },
                { value: 'changeeol', type: 'command', options: [] },
                { value: 'checksum', type: 'command', options: [] },
                { value: 'clear', type: 'command', options: [] },
                { value: 'clonevar', type: 'command', options: [] },
                { value: 'codebook', type: 'command', options: [] },
                { value: 'collapse', type: 'command', options: [] },
                { value: 'compare', type: 'command', options: [] },
                { value: 'compress', type: 'command', options: [] },
                { value: 'contract', type: 'command', options: [] },
                { value: 'copy', type: 'command', options: [] },
                { value: 'corr2data', type: 'command', options: [] },
                { value: 'count', type: 'command', options: [] },
                { value: 'cross', type: 'command', options: [] },
                { value: 'Data types', type: 'command', options: [] },
                { value: 'datasignature', type: 'command', options: [] },
                { value: 'date', type: 'command', options: [] },
                { value: 'describe', type: 'command', options: [] },
                { value: 'destring', type: 'command', options: [] },
                { value: 'dir', type: 'command', options: [] },
                { value: 'drawnorm', type: 'command', options: [] },
                { value: 'drop', type: 'command', options: [] },
                { value: 'ds', type: 'command', options: [] },
                { value: 'duplicates', type: 'command', options: [] },
                { value: 'dyngen', type: 'command', options: [] },
                { value: 'edit', type: 'command', options: [] },
                { value: 'egen', type: 'command', options: [] },
                { value: 'encode', type: 'command', options: [] },
                { value: 'erase', type: 'command', options: [] },
                { value: 'expand', type: 'command', options: [] },
                { value: 'expandcl', type: 'command', options: [] },
                { value: 'export', type: 'command', options: [] },
                { value: 'filefilter', type: 'command', options: [] },
                { value: 'fillin', type: 'command', options: [] },
                { value: 'format', type: 'command', options: [] },
                { value: 'frames intro', type: 'command', options: [] },
                { value: 'frames', type: 'command', options: [] },
                { value: 'frame change', type: 'command', options: [] },
                { value: 'frame copy', type: 'command', options: [] },
                { value: 'frame create', type: 'command', options: [] },
                { value: 'frame drop', type: 'command', options: [] },
                { value: 'frame prefix', type: 'command', options: [] },
                { value: 'frame put', type: 'command', options: [] },
                { value: 'frame pwf', type: 'command', options: [] },
                { value: 'frame rename', type: 'command', options: [] },
                { value: 'frames dir', type: 'command', options: [] },
                { value: 'frames reset', type: 'command', options: [] },
                { value: 'frget', type: 'command', options: [] },
                { value: 'frlink', type: 'command', options: [] },
                { value: 'generate', type: 'command', options: [] },
                { value: 'gsort', type: 'command', options: [] },
                { value: 'hexdump', type: 'command', options: [] },
                { value: 'icd', type: 'command', options: [] },
                { value: 'icd9', type: 'command', options: [] },
                { value: 'icd9p', type: 'command', options: [] },
                { value: 'icd10', type: 'command', options: [] },
                { value: 'icd10cm', type: 'command', options: [] },
                { value: 'icd10pcs', type: 'command', options: [] },
                { value: 'import', type: 'command', options: [] },
                { value: 'import dbase', type: 'command', options: [] },
                { value: 'import delimited', type: 'command', options: [] },
                { value: 'import excel', type: 'command', options: [] },
                { value: 'import fred', type: 'command', options: [] },
                { value: 'import haver', type: 'command', options: [] },
                { value: 'import sas', type: 'command', options: [] },
                { value: 'import sasxport5', type: 'command', options: [] },
                { value: 'format', type: 'command', options: [] },
                { value: 'import sasxport8', type: 'command', options: [] },
                { value: 'format', type: 'command', options: [] },
                { value: 'import spss', type: 'command', options: [] },
                { value: 'infile', type: 'command', options: [] },
                { value: 'infix', type: 'command', options: [] },
                { value: 'input', type: 'command', options: [] },
                { value: 'insobs', type: 'command', options: [] },
                { value: 'inspect', type: 'command', options: [] },
                { value: 'ipolate', type: 'command', options: [] },
                { value: 'isid', type: 'command', options: [] },
                { value: 'jdbc', type: 'command', options: [] },
                { value: 'joinby', type: 'command', options: [] },
                { value: 'label', type: 'command', options: [] },
                { value: 'label language', type: 'command', options: [] },
                { value: 'labelbook', type: 'command', options: [] },
                { value: 'list', type: 'command', options: [] },
                { value: 'lookfor', type: 'command', options: [] },
                { value: 'memory', type: 'command', options: [] },
                { value: 'merge', type: 'command', options: [] },
                { value: 'mkdir', type: 'command', options: [] },
                { value: 'mvencode', type: 'command', options: [] },
                { value: 'notes', type: 'command', options: [] },
                { value: 'obs', type: 'command', options: [] },
                { value: 'odbc', type: 'command', options: [] },
                { value: 'order', type: 'command', options: [] },
                { value: 'outfile', type: 'command', options: [] },
                { value: 'pctile', type: 'command', options: [] },
                { value: 'putmata', type: 'command', options: [] },
                { value: 'range', type: 'command', options: [] },
                { value: 'recast', type: 'command', options: [] },
                { value: 'recode', type: 'command', options: [] },
                { value: 'rename', type: 'command', options: [] },
                { value: 'rename group', type: 'command', options: [] },
                { value: 'reshape', type: 'command', options: [] },
                { value: 'rmdir', type: 'command', options: [] },
                { value: 'sample', type: 'command', options: [] },
                { value: 'save', type: 'command', options: [] },
                { value: 'separate', type: 'command', options: [] },
                { value: 'shell', type: 'command', options: [] },
                { value: 'snapshot', type: 'command', options: [] },
                { value: 'sort', type: 'command', options: [] },
                { value: 'split', type: 'command', options: [] },
                { value: 'splitsample', type: 'command', options: [] },
                { value: 'stack', type: 'command', options: [] },
                { value: 'statsby', type: 'command', options: [] },
                { value: 'sysuse', type: 'command', options: [] },
                { value: 'type', type: 'command', options: [] },
                { value: 'unicode', type: 'command', options: [] },
                { value: 'unicode collator', type: 'command', options: [] },
                { value: 'unicode convertfile', type: 'command', options: [] },
                { value: 'unicode encoding', type: 'command', options: [] },
                { value: 'unicode locale', type: 'command', options: [] },
                { value: 'unicode translate', type: 'command', options: [] },
                { value: 'use', type: 'command', options: [] },
                { value: 'iv Contents', type: 'command', options: [] },
                { value: 'varmanage', type: 'command', options: [] },
                { value: 'vl', type: 'command', options: [] },
                { value: 'vl create', type: 'command', options: [] },
                { value: 'vl drop', type: 'command', options: [] },
                { value: 'vl list', type: 'command', options: [] },
                { value: 'vl rebuild', type: 'command', options: [] },
                { value: 'vl set', type: 'command', options: [] },
                { value: 'webuse', type: 'command', options: [] },
                { value: 'xpose', type: 'command', options: [] },
                { value: 'zipfile', type: 'command', options: [] },
                { value: 'dsge', type: 'command', options: [] },
                { value: 'dsgenl', type: 'command', options: [] },
                { value: 'estat covariance', type: 'command', options: [] },
                { value: 'estat policy', type: 'command', options: [] },
                { value: 'estat stable', type: 'command', options: [] },
                { value: 'estat steady', type: 'command', options: [] },
                { value: 'estat transition', type: 'command', options: [] },
                { value: 'eintreg', type: 'command', options: [] },
                { value: 'eintreg predict', type: 'command', options: [] },
                { value: 'eoprobit', type: 'command', options: [] },
                { value: 'eoprobit predict', type: 'command', options: [] },
                { value: 'eprobit', type: 'command', options: [] },
                { value: 'eprobit predict', type: 'command', options: [] },
                { value: 'eregress', type: 'command', options: [] },
                { value: 'eregress predict', type: 'command', options: [] },
                { value: 'estat teffects', type: 'command', options: [] },
                { value: 'predict advanced', type: 'command', options: [] },
                { value: 'predict treatment', type: 'command', options: [] },
                { value: 'fmm estimation', type: 'command', options: [] },
                { value: 'fmm', type: 'command', options: [] },
                { value: 'fmm: betareg', type: 'command', options: [] },
                { value: 'fmm: cloglog', type: 'command', options: [] },
                { value: 'fmm: glm', type: 'command', options: [] },
                { value: 'fmm: intreg', type: 'command', options: [] },
                { value: 'fmm: ivregress', type: 'command', options: [] },
                { value: 'fmm: logit', type: 'command', options: [] },
                { value: 'fmm: mlogit', type: 'command', options: [] },
                { value: 'fmm: nbreg', type: 'command', options: [] },
                { value: 'fmm: ologit', type: 'command', options: [] },
                { value: 'fmm: oprobit', type: 'command', options: [] },
                { value: 'fmm: pointmass', type: 'command', options: [] },
                { value: 'fmm: poisson', type: 'command', options: [] },
                { value: 'fmm: probit', type: 'command', options: [] },
                { value: 'fmm: regress', type: 'command', options: [] },
                { value: 'fmm: streg', type: 'command', options: [] },
                { value: 'fmm: tobit', type: 'command', options: [] },
                { value: 'fmm: tpoisson', type: 'command', options: [] },
                { value: 'fmm: truncreg', type: 'command', options: [] },
                { value: 'estat eform', type: 'command', options: [] },
                { value: 'estat lcmean', type: 'command', options: [] },
                { value: 'estat lcprob', type: 'command', options: [] },
                { value: '2P()', type: 'function', options: [] },
                { value: 'abbrev()', type: 'function', options: [] },
                { value: 'abs()', type: 'function', options: [] },
                { value: 'acos()', type: 'function', options: [] },
                { value: 'acosh()', type: 'function', options: [] },
                { value: 'age()', type: 'function', options: [] },
                { value: 'asin()', type: 'function', options: [] },
                { value: 'asinh()', type: 'function', options: [] },
                { value: 'atan()', type: 'function', options: [] },
                { value: 'atan2()', type: 'function', options: [] },
                { value: 'atanh()', type: 'function', options: [] },
                { value: 'autocode()', type: 'function', options: [] },
                { value: 'beta()', type: 'function', options: [] },
                { value: 'betaden()', type: 'function', options: [] },
                { value: 'binomial()', type: 'function', options: [] },
                { value: 'binomialp()', type: 'function', options: [] },
                { value: 'binomialtail()', type: 'function', options: [] },
                { value: 'binormal()', type: 'function', options: [] },
                { value: 'birthday()', type: 'function', options: [] },
                { value: 'bofd()', type: 'function', options: [] },
                { value: 'byteorder()', type: 'function', options: [] },
                { value: 'c()', type: 'function', options: [] },
                { value: 'caller()', type: 'function', options: [] },
                { value: 'cauchy()', type: 'function', options: [] },
                { value: 'cauchyden()', type: 'function', options: [] },
                { value: 'cauchytail()', type: 'function', options: [] },
                { value: 'Cdhms()', type: 'function', options: [] },
                { value: 'ceil()', type: 'function', options: [] },
                { value: 'char()', type: 'function', options: [] },
                { value: 'chi2()', type: 'function', options: [] },
                { value: 'chi2den()', type: 'function', options: [] },
                { value: 'chi2tail()', type: 'function', options: [] },
                { value: 'Chms()', type: 'function', options: [] },
                { value: 'cholesky()', type: 'function', options: [] },
                { value: 'chop()', type: 'function', options: [] },
                { value: 'clip()', type: 'function', options: [] },
                { value: 'clock()', type: 'function', options: [] },
                { value: 'clockdiff()', type: 'function', options: [] },
                { value: 'clockpart()', type: 'function', options: [] },
                { value: 'cloglog()', type: 'function', options: [] },
                { value: 'Cmdyhms()', type: 'function', options: [] },
                { value: 'cofC()', type: 'function', options: [] },
                { value: 'cofd()', type: 'function', options: [] },
                { value: 'coleqnumb()', type: 'function', options: [] },
                { value: 'collatorlocale()', type: 'function', options: [] },
                { value: 'collatorversion()', type: 'function', options: [] },
                { value: 'colnfreeparms()', type: 'function', options: [] },
                { value: 'colnumb()', type: 'function', options: [] },
                { value: 'colsof()', type: 'function', options: [] },
                { value: 'comb()', type: 'function', options: [] },
                { value: 'cond()', type: 'function', options: [] },
                { value: 'corr()', type: 'function', options: [] },
                { value: 'cos()', type: 'function', options: [] },
                { value: 'cosh()', type: 'function', options: [] },
                { value: 'daily()', type: 'function', options: [] },
                { value: 'date()', type: 'function', options: [] },
                { value: 'datediff()', type: 'function', options: [] },
                { value: 'datepart()', type: 'function', options: [] },
                { value: 'day()', type: 'function', options: [] },
                { value: 'daysinmonth()', type: 'function', options: [] },
                { value: 'det()', type: 'function', options: [] },
                { value: 'dgammapda()', type: 'function', options: [] },
                { value: 'dgammapdada()', type: 'function', options: [] },
                { value: 'dgammapdadx()', type: 'function', options: [] },
                { value: 'dgammapdx()', type: 'function', options: [] },
                { value: 'dgammapdxdx()', type: 'function', options: [] },
                { value: 'dhms()', type: 'function', options: [] },
                { value: 'diag()', type: 'function', options: [] },
                { value: 'diag0cnt()', type: 'function', options: [] },
                { value: 'digamma()', type: 'function', options: [] },
                { value: 'dofb()', type: 'function', options: [] },
                { value: 'dofc()', type: 'function', options: [] },
                { value: 'dofh()', type: 'function', options: [] },
                { value: 'dofm()', type: 'function', options: [] },
                { value: 'dofq()', type: 'function', options: [] },
                { value: 'dofw()', type: 'function', options: [] },
                { value: 'dofy()', type: 'function', options: [] },
                { value: 'dow()', type: 'function', options: [] },
                { value: 'doy()', type: 'function', options: [] },
                { value: 'dunnettprob()', type: 'function', options: [] },
                { value: 'e()', type: 'function', options: [] },
                { value: 'el()', type: 'function', options: [] },
                { value: 'eprop()', type: 'function', options: [] },
                { value: 'epsdouble()', type: 'function', options: [] },
                { value: 'epsfloat()', type: 'function', options: [] },
                { value: 'exp()', type: 'function', options: [] },
                { value: 'expm1()', type: 'function', options: [] },
                { value: 'exponential()', type: 'function', options: [] },
                { value: 'exponentialden()', type: 'function', options: [] },
                { value: 'exponentialtail()', type: 'function', options: [] },
                { value: 'F()', type: 'function', options: [] },
                { value: 'Fden()', type: 'function', options: [] },
                { value: 'fileexists()', type: 'function', options: [] },
                { value: 'fileread()', type: 'function', options: [] },
                { value: 'filereaderror()', type: 'function', options: [] },
                { value: 'filewrite()', type: 'function', options: [] },
                { value: 'firstdayofmonth()', type: 'function', options: [] },
                { value: 'float()', type: 'function', options: [] },
                { value: 'floor()', type: 'function', options: [] },
                { value: 'fmtwidth()', type: 'function', options: [] },
                { value: 'frac()', type: 'function', options: [] },
                { value: 'frval()', type: 'function', options: [] },
                { value: 'Ftail()', type: 'function', options: [] },
                { value: 'gamma()', type: 'function', options: [] },
                { value: 'gammaden()', type: 'function', options: [] },
                { value: 'gammap()', type: 'function', options: [] },
                { value: 'gammaptail()', type: 'function', options: [] },
                { value: 'get()', type: 'function', options: [] },
                { value: 'hadamard()', type: 'function', options: [] },
                { value: 'halfyear()', type: 'function', options: [] },
                { value: 'halfyearly()', type: 'function', options: [] },
                { value: 'hh()', type: 'function', options: [] },
                { value: 'hhC()', type: 'function', options: [] },
                { value: 'hms()', type: 'function', options: [] },
                { value: 'hofd()', type: 'function', options: [] },
                { value: 'hours()', type: 'function', options: [] },
                { value: 'hypergeometric()', type: 'function', options: [] },
                { value: 'hypergeometricp()', type: 'function', options: [] },
                { value: 'I()', type: 'function', options: [] },
                { value: 'ibeta()', type: 'function', options: [] },
                { value: 'ibetatail()', type: 'function', options: [] },
                { value: 'igaussian()', type: 'function', options: [] },
                { value: 'igaussianden()', type: 'function', options: [] },
                { value: 'igaussiantail()', type: 'function', options: [] },
                { value: 'indexnot()', type: 'function', options: [] },
                { value: 'inlist()', type: 'function', options: [] },
                { value: 'inrange()', type: 'function', options: [] },
                { value: 'int()', type: 'function', options: [] },
                { value: 'integer obtained by truncating x toward 0 (thus, ', type: 'function', options: [] },
                { value: 'inv()', type: 'function', options: [] },
                { value: 'invbinomial()', type: 'function', options: [] },
                { value: 'invbinomialtail()', type: 'function', options: [] },
                { value: 'invcauchy()', type: 'function', options: [] },
                { value: 'invcauchytail()', type: 'function', options: [] },
                { value: 'invchi2()', type: 'function', options: [] },
                { value: 'invchi2tail()', type: 'function', options: [] },
                { value: 'invcloglog()', type: 'function', options: [] },
                { value: 'invdunnettprob()', type: 'function', options: [] },
                { value: 'invexponential()', type: 'function', options: [] },
                { value: 'invexponentialtail()', type: 'function', options: [] },
                { value: 'invF()', type: 'function', options: [] },
                { value: 'invFtail()', type: 'function', options: [] },
                { value: 'invgammap()', type: 'function', options: [] },
                { value: 'invgammaptail()', type: 'function', options: [] },
                { value: 'invibeta()', type: 'function', options: [] },
                { value: 'invibetatail()', type: 'function', options: [] },
                { value: 'invigaussian()', type: 'function', options: [] },
                { value: 'invigaussiantail()', type: 'function', options: [] },
                { value: 'invlaplace()', type: 'function', options: [] },
                { value: 'invlaplacetail()', type: 'function', options: [] },
                { value: 'invlogistic()', type: 'function', options: [] },
                { value: 'invlogistictail()', type: 'function', options: [] },
                { value: 'invlogit()', type: 'function', options: [] },
                { value: 'invnbinomial()', type: 'function', options: [] },
                { value: 'invnbinomialtail()', type: 'function', options: [] },
                { value: 'invnchi2()', type: 'function', options: [] },
                { value: 'invnchi2tail()', type: 'function', options: [] },
                { value: 'invnF()', type: 'function', options: [] },
                { value: 'invnFtail()', type: 'function', options: [] },
                { value: 'invnibeta()', type: 'function', options: [] },
                { value: 'invnormal()', type: 'function', options: [] },
                { value: 'invnt()', type: 'function', options: [] },
                { value: 'invnttail()', type: 'function', options: [] },
                { value: 'invpoisson()', type: 'function', options: [] },
                { value: 'invpoissontail()', type: 'function', options: [] },
                { value: 'invsym()', type: 'function', options: [] },
                { value: 'invt()', type: 'function', options: [] },
                { value: 'invttail()', type: 'function', options: [] },
                { value: 'invtukeyprob()', type: 'function', options: [] },
                { value: 'invweibull()', type: 'function', options: [] },
                { value: 'invweibullph()', type: 'function', options: [] },
                { value: 'invweibullphtail()', type: 'function', options: [] },
                { value: 'invweibulltail()', type: 'function', options: [] },
                { value: 'irecode()', type: 'function', options: [] },
                { value: 'isleapsecond()', type: 'function', options: [] },
                { value: 'isleapyear()', type: 'function', options: [] },
                { value: 'issymmetric()', type: 'function', options: [] },
                { value: 'J()', type: 'function', options: [] },
                { value: 'laplace()', type: 'function', options: [] },
                { value: 'laplaceden()', type: 'function', options: [] },
                { value: 'laplacetail()', type: 'function', options: [] },
                { value: 'lastdayofmonth()', type: 'function', options: [] },
                { value: 'ln()', type: 'function', options: [] },
                { value: 'ln1m()', type: 'function', options: [] },
                { value: 'ln1p()', type: 'function', options: [] },
                { value: 'lncauchyden()', type: 'function', options: [] },
                { value: 'lnfactorial()', type: 'function', options: [] },
                { value: 'lngamma()', type: 'function', options: [] },
                { value: 'lnigammaden()', type: 'function', options: [] },
                { value: 'lnigaussianden()', type: 'function', options: [] },
                { value: 'lniwishartden()', type: 'function', options: [] },
                { value: 'lnlaplaceden()', type: 'function', options: [] },
                { value: 'lnmvnormalden()', type: 'function', options: [] },
                { value: 'lnnormal()', type: 'function', options: [] },
                { value: 'lnnormalden()', type: 'function', options: [] },
                { value: 'lnwishartden()', type: 'function', options: [] },
                { value: 'lnΓ()', type: 'function', options: [] },
                { value: 'log()', type: 'function', options: [] },
                { value: 'log10()', type: 'function', options: [] },
                { value: 'log1m()', type: 'function', options: [] },
                { value: 'log1p()', type: 'function', options: [] },
                { value: 'logistic()', type: 'function', options: [] },
                { value: 'logisticden()', type: 'function', options: [] },
                { value: 'logistictail()', type: 'function', options: [] },
                { value: 'logit()', type: 'function', options: [] },
                { value: 'matmissing()', type: 'function', options: [] },
                { value: 'matrix()', type: 'function', options: [] },
                { value: 'matuniform()', type: 'function', options: [] },
                { value: 'max()', type: 'function', options: [] },
                { value: 'maxbyte()', type: 'function', options: [] },
                { value: 'maxdouble()', type: 'function', options: [] },
                { value: 'maxfloat()', type: 'function', options: [] },
                { value: 'maxint()', type: 'function', options: [] },
                { value: 'maxlong()', type: 'function', options: [] },
                { value: 'mdy()', type: 'function', options: [] },
                { value: 'mdyhms()', type: 'function', options: [] },
                { value: 'mi()', type: 'function', options: [] },
                { value: 'min()', type: 'function', options: [] },
                { value: 'minbyte()', type: 'function', options: [] },
                { value: 'mindouble()', type: 'function', options: [] },
                { value: 'minfloat()', type: 'function', options: [] },
                { value: 'minint()', type: 'function', options: [] },
                { value: 'minlong()', type: 'function', options: [] },
                { value: 'minutes()', type: 'function', options: [] },
                { value: 'missing()', type: 'function', options: [] },
                { value: 'mm()', type: 'function', options: [] },
                { value: 'mmC()', type: 'function', options: [] },
                { value: 'mod()', type: 'function', options: [] },
                { value: 'mofd()', type: 'function', options: [] },
                { value: 'month()', type: 'function', options: [] },
                { value: 'monthly()', type: 'function', options: [] },
                { value: 'msofhours()', type: 'function', options: [] },
                { value: 'msofminutes()', type: 'function', options: [] },
                { value: 'msofseconds()', type: 'function', options: [] },
                { value: 'N()', type: 'function', options: [] },
                { value: 'nara()', type: 'function', options: [] },
                { value: 'nbetaden()', type: 'function', options: [] },
                { value: 'nbinomial()', type: 'function', options: [] },
                { value: 'nbinomialp()', type: 'function', options: [] },
                { value: 'nbinomialtail()', type: 'function', options: [] },
                { value: 'nchi2()', type: 'function', options: [] },
                { value: 'nchi2den()', type: 'function', options: [] },
                { value: 'nchi2tail()', type: 'function', options: [] },
                { value: 'nextbirthday()', type: 'function', options: [] },
                { value: 'nextleapyear()', type: 'function', options: [] },
                { value: 'nF()', type: 'function', options: [] },
                { value: 'nFden()', type: 'function', options: [] },
                { value: 'nFtail()', type: 'function', options: [] },
                { value: 'nibeta()', type: 'function', options: [] },
                { value: 'normal()', type: 'function', options: [] },
                { value: 'normalden()', type: 'function', options: [] },
                { value: 'now()', type: 'function', options: [] },
                { value: 'npnchi2()', type: 'function', options: [] },
                { value: 'npnF()', type: 'function', options: [] },
                { value: 'npnt()', type: 'function', options: [] },
                { value: 'nt()', type: 'function', options: [] },
                { value: 'ntden()', type: 'function', options: [] },
                { value: 'nttail()', type: 'function', options: [] },
                { value: 'nullmat()', type: 'function', options: [] },
                { value: 'P()', type: 'function', options: [] },
                { value: 'plural()', type: 'function', options: [] },
                { value: 'poisson()', type: 'function', options: [] },
                { value: 'poissonp()', type: 'function', options: [] },
                { value: 'poissontail()', type: 'function', options: [] },
                { value: 'previousbirthday()', type: 'function', options: [] },
                { value: 'previousleapyear()', type: 'function', options: [] },
                { value: 'qofd()', type: 'function', options: [] },
                { value: 'quarter()', type: 'function', options: [] },
                { value: 'quarterly()', type: 'function', options: [] },
                { value: 'r()', type: 'function', options: [] },
                { value: 'rbeta()', type: 'function', options: [] },
                { value: 'rbinomial()', type: 'function', options: [] },
                { value: 'rcauchy()', type: 'function', options: [] },
                { value: 'rchi2()', type: 'function', options: [] },
                { value: 'real()', type: 'function', options: [] },
                { value: 'recode()', type: 'function', options: [] },
                { value: 'regexm()', type: 'function', options: [] },
                { value: 'regexr()', type: 'function', options: [] },
                { value: 'regexs()', type: 'function', options: [] },
                { value: 'reldif()', type: 'function', options: [] },
                { value: 'replay()', type: 'function', options: [] },
                { value: 'return()', type: 'function', options: [] },
                { value: 'rexponential()', type: 'function', options: [] },
                { value: 'rgamma()', type: 'function', options: [] },
                { value: 'rhypergeometric()', type: 'function', options: [] },
                { value: 'rigaussian()', type: 'function', options: [] },
                { value: 'rlaplace()', type: 'function', options: [] },
                { value: 'rlogistic()', type: 'function', options: [] },
                { value: 'rnbinomial()', type: 'function', options: [] },
                { value: 'rnormal()', type: 'function', options: [] },
                { value: 'round()', type: 'function', options: [] },
                { value: 'roweqnumb()', type: 'function', options: [] },
                { value: 'rownfreeparms()', type: 'function', options: [] },
                { value: 'rownumb()', type: 'function', options: [] },
                { value: 'rowsof()', type: 'function', options: [] },
                { value: 'rpoisson()', type: 'function', options: [] },
                { value: 'rt()', type: 'function', options: [] },
                { value: 'runiform()', type: 'function', options: [] },
                { value: 'runiformint()', type: 'function', options: [] },
                { value: 'rweibull()', type: 'function', options: [] },
                { value: 'rweibullph()', type: 'function', options: [] },
                { value: 's()', type: 'function', options: [] },
                { value: 'scalar()', type: 'function', options: [] },
                { value: 'seconds()', type: 'function', options: [] },
                { value: 'sign()', type: 'function', options: [] },
                { value: 'sin()', type: 'function', options: [] },
                { value: 'sinh()', type: 'function', options: [] },
                { value: 'smallestdouble()', type: 'function', options: [] },
                { value: 'soundex()', type: 'function', options: [] },
                { value: 'sqrt()', type: 'function', options: [] },
                { value: 'ss()', type: 'function', options: [] },
                { value: 'ssC()', type: 'function', options: [] },
                { value: 'strcat()', type: 'function', options: [] },
                { value: 'strdup()', type: 'function', options: [] },
                { value: 'string()', type: 'function', options: [] },
                { value: 'stritrim()', type: 'function', options: [] },
                { value: 'strlen()', type: 'function', options: [] },
                { value: 'strlower()', type: 'function', options: [] },
                { value: 'strltrim()', type: 'function', options: [] },
                { value: 'strmatch()', type: 'function', options: [] },
                { value: 'strofreal()', type: 'function', options: [] },
                { value: 'strpos()', type: 'function', options: [] },
                { value: 'strproper()', type: 'function', options: [] },
                { value: 'strreverse()', type: 'function', options: [] },
                { value: 'strrpos()', type: 'function', options: [] },
                { value: 'strrtrim()', type: 'function', options: [] },
                { value: 'strtoname()', type: 'function', options: [] },
                { value: 'strtrim()', type: 'function', options: [] },
                { value: 'strupper()', type: 'function', options: [] },
                { value: 'subinstr()', type: 'function', options: [] },
                { value: 'subinword()', type: 'function', options: [] },
                { value: 'substr()', type: 'function', options: [] },
                { value: 'sum()', type: 'function', options: [] },
                { value: 'sweep()', type: 'function', options: [] },
                { value: 't()', type: 'function', options: [] },
                { value: 'tan()', type: 'function', options: [] },
                { value: 'tanh()', type: 'function', options: [] },
                { value: 'tc()', type: 'function', options: [] },
                { value: 'td()', type: 'function', options: [] },
                { value: 'tden()', type: 'function', options: [] },
                { value: 'th()', type: 'function', options: [] },
                { value: 'tin()', type: 'function', options: [] },
                { value: 'tm()', type: 'function', options: [] },
                { value: 'tobytes()', type: 'function', options: [] },
                { value: 'today()', type: 'function', options: [] },
                { value: 'tq()', type: 'function', options: [] },
                { value: 'trace()', type: 'function', options: [] },
                { value: 'trigamma()', type: 'function', options: [] },
                { value: 'trunc()', type: 'function', options: [] },
                { value: 'ttail()', type: 'function', options: [] },
                { value: 'tukeyprob()', type: 'function', options: [] },
                { value: 'tw()', type: 'function', options: [] },
                { value: 'twithin()', type: 'function', options: [] },
                { value: 'uchar()', type: 'function', options: [] },
                { value: 'udstrlen()', type: 'function', options: [] },
                { value: 'udsubstr()', type: 'function', options: [] },
                { value: 'uisdigit()', type: 'function', options: [] },
                { value: 'uisletter()', type: 'function', options: [] },
                { value: 'ustrcompare()', type: 'function', options: [] },
                { value: 'ustrcompareex()', type: 'function', options: [] },
                { value: 'ustrfix()', type: 'function', options: [] },
                { value: 'ustrfrom()', type: 'function', options: [] },
                { value: 'ustrinvalidcnt()', type: 'function', options: [] },
                { value: 'ustrleft()', type: 'function', options: [] },
                { value: 'ustrlen()', type: 'function', options: [] },
                { value: 'ustrlower()', type: 'function', options: [] },
                { value: 'ustrltrim()', type: 'function', options: [] },
                { value: 'ustrnormalize()', type: 'function', options: [] },
                { value: 'ustrpos()', type: 'function', options: [] },
                { value: 'ustrregexm()', type: 'function', options: [] },
                { value: 'ustrregexra()', type: 'function', options: [] },
                { value: 'ustrregexrf()', type: 'function', options: [] },
                { value: 'ustrregexs()', type: 'function', options: [] },
                { value: 'ustrreverse()', type: 'function', options: [] },
                { value: 'ustrright()', type: 'function', options: [] },
                { value: 'ustrrpos()', type: 'function', options: [] },
                { value: 'ustrrtrim()', type: 'function', options: [] },
                { value: 'ustrsortkey()', type: 'function', options: [] },
                { value: 'ustrsortkeyex()', type: 'function', options: [] },
                { value: 'ustrtitle()', type: 'function', options: [] },
                { value: 'ustrto()', type: 'function', options: [] },
                { value: 'ustrtohex()', type: 'function', options: [] },
                { value: 'ustrtoname()', type: 'function', options: [] },
                { value: 'ustrtrim()', type: 'function', options: [] },
                { value: 'ustrunescape()', type: 'function', options: [] },
                { value: 'ustrupper()', type: 'function', options: [] },
                { value: 'ustrword()', type: 'function', options: [] },
                { value: 'ustrwordcount()', type: 'function', options: [] },
                { value: 'usubinstr()', type: 'function', options: [] },
                { value: 'usubstr()', type: 'function', options: [] },
                { value: 'vec()', type: 'function', options: [] },
                { value: 'vecdiag()', type: 'function', options: [] },
                { value: 'week()', type: 'function', options: [] },
                { value: 'weekly()', type: 'function', options: [] },
                { value: 'weibull()', type: 'function', options: [] },
                { value: 'weibullden()', type: 'function', options: [] },
                { value: 'weibullph()', type: 'function', options: [] },
                { value: 'weibullphden()', type: 'function', options: [] },
                { value: 'weibullphtail()', type: 'function', options: [] },
                { value: 'weibulltail()', type: 'function', options: [] },
                { value: 'wofd()', type: 'function', options: [] },
                { value: 'word()', type: 'function', options: [] },
                { value: 'wordbreaklocale()', type: 'function', options: [] },
                { value: 'wordcount()', type: 'function', options: [] },
                { value: 'year()', type: 'function', options: [] },
                { value: 'yearly()', type: 'function', options: [] },
                { value: 'yh()', type: 'function', options: [] },
                { value: 'ym()', type: 'function', options: [] },
                { value: 'yofd()', type: 'function', options: [] },
                { value: 'yq()', type: 'function', options: [] },
                { value: 'yw()', type: 'function', options: [] },
                { value: 'Γ()', type: 'function', options: [] },
                { value: 'Φ()', type: 'function', options: [] },
                { value: 'graph', type: 'command', options: [] },
                { value: 'graphbar', type: 'command', options: [] },
                { value: 'graphbox', type: 'command', options: [] },
                { value: 'graph close', type: 'command', options: [] },
                { value: 'graph combine', type: 'command', options: [] },
                { value: 'graph copy', type: 'command', options: [] },
                { value: 'graph describe', type: 'command', options: [] },
                { value: 'graph dir', type: 'command', options: [] },
                { value: 'graph display', type: 'command', options: [] },
                { value: 'graph dot', type: 'command', options: [] },
                { value: 'graph drop', type: 'command', options: [] },
                { value: 'graph export', type: 'command', options: [] },
                { value: 'graph manipulation', type: 'command', options: [] },
                { value: 'graph matrix', type: 'command', options: [] },
                { value: 'graph other', type: 'command', options: [] },
                { value: 'graph pie', type: 'command', options: [] },
                { value: 'graph play', type: 'command', options: [] },
                { value: 'graph print', type: 'command', options: [] },
                { value: 'graph query', type: 'command', options: [] },
                { value: 'graph rename', type: 'command', options: [] },
                { value: 'graph replay', type: 'command', options: [] },
                { value: 'graph save', type: 'command', options: [] },
                { value: 'graph set', type: 'command', options: [] },
                { value: 'graph twoway', type: 'command', options: [] },
                { value: 'graph twoway area', type: 'command', options: [] },
                { value: 'graph twoway bar', type: 'command', options: [] },
                { value: 'graph twoway connected', type: 'command', options: [] },
                { value: 'graph twoway contour', type: 'command', options: [] },
                { value: 'graph twoway contourline', type: 'command', options: [] },
                { value: 'graph twoway dot', type: 'command', options: [] },
                { value: 'graph twoway dropline', type: 'command', options: [] },
                { value: 'graph twoway fpfit', type: 'command', options: [] },
                { value: 'graph twoway fpfitci', type: 'command', options: [] },
                { value: 'graph twoway function', type: 'command', options: [] },
                { value: 'graph twoway histogram', type: 'command', options: [] },
                { value: 'graph twoway kdensity', type: 'command', options: [] },
                { value: 'graph twoway lfit', type: 'command', options: [] },
                { value: 'graph twoway lfitci', type: 'command', options: [] },
                { value: 'graph twoway line', type: 'command', options: [] },
                { value: 'graph twoway lowess', type: 'command', options: [] },
                { value: 'graph twoway lpoly', type: 'command', options: [] },
                { value: 'graph twoway lpolyci', type: 'command', options: [] },
                { value: 'graph twoway mband', type: 'command', options: [] },
                { value: 'graph twoway mspline', type: 'command', options: [] },
                { value: 'graph twoway pcarrow', type: 'command', options: [] },
                { value: 'graph twoway pcarrowi', type: 'command', options: [] },
                { value: 'graph twoway pccapsym', type: 'command', options: [] },
                { value: 'graph twoway pci', type: 'command', options: [] },
                { value: 'graph twoway pcscatter', type: 'command', options: [] },
                { value: 'graph twoway pcspike', type: 'command', options: [] },
                { value: 'graph twoway qfit', type: 'command', options: [] },
                { value: 'graph twoway qfitci', type: 'command', options: [] },
                { value: 'graph twoway rarea', type: 'command', options: [] },
                { value: 'graph twoway rbar', type: 'command', options: [] },
                { value: 'graph twoway rcap', type: 'command', options: [] },
                { value: 'graph twoway rcapsym', type: 'command', options: [] },
                { value: 'graph twoway rconnected', type: 'command', options: [] },
                { value: 'graph twoway rline', type: 'command', options: [] },
                { value: 'graph twoway rscatter', type: 'command', options: [] },
                { value: 'graph twoway rspike', type: 'command', options: [] },
                { value: 'graph twoway scatter', type: 'command', options: [] },
                { value: 'graph twoway scatteri', type: 'command', options: [] },
                { value: 'graph twoway spike', type: 'command', options: [] },
                { value: 'graph twoway tsline', type: 'command', options: [] },
                { value: 'graph use', type: 'command', options: [] },
                { value: 'palette', type: 'command', options: [] },
                { value: 'set graphics', type: 'command', options: [] },
                { value: 'set printcolor', type: 'command', options: [] },
                { value: 'set scheme', type: 'command', options: [] },
                { value: 'irt', type: 'command', options: [] },
                { value: 'pl', type: 'command', options: [] },
                { value: 'irt grm', type: 'command', options: [] },
                { value: 'irt nrm', type: 'command', options: [] },
                { value: 'irt pcm', type: 'command', options: [] },
                { value: 'irt rsm', type: 'command', options: [] },
                { value: 'irt hybrid', type: 'command', options: [] },
                { value: 'irt, group()', type: 'command', options: [] },
                { value: 'irt constraints', type: 'command', options: [] },
                { value: 'estat report', type: 'command', options: [] },
                { value: 'estat greport', type: 'command', options: [] },
                { value: 'irtgraph icc', type: 'command', options: [] },
                { value: 'irtgraph tcc', type: 'command', options: [] },
                { value: 'irtgraph iif', type: 'command', options: [] },
                { value: 'irtgraph tif', type: 'command', options: [] },
                { value: 'diflogistic', type: 'command', options: [] },
                { value: 'difmh', type: 'command', options: [] },
                { value: 'bicplot', type: 'command', options: [] },
                { value: 'coefpath', type: 'command', options: [] },
                { value: 'cvplot', type: 'command', options: [] },
                { value: 'dslogit', type: 'command', options: [] },
                { value: 'dspoisson', type: 'command', options: [] },
                { value: 'dsregress', type: 'command', options: [] },
                { value: 'elasticnet', type: 'command', options: [] },
                { value: 'estimates', type: 'command', options: [] },
                { value: 'store', type: 'command', options: [] },
                { value: 'examples', type: 'command', options: [] },
                { value: 'requirements', type: 'command', options: [] },
                { value: 'lasso', type: 'command', options: [] },
                { value: 'lassocoef', type: 'command', options: [] },
                { value: 'lasso fitting', type: 'command', options: [] },
                { value: 'lassogof', type: 'command', options: [] },
                { value: 'lassoinfo', type: 'command', options: [] },
                { value: 'lassoknots', type: 'command', options: [] },
                { value: 'lassoselect', type: 'command', options: [] },
                { value: 'poivregress', type: 'command', options: [] },
                { value: 'pologit', type: 'command', options: [] },
                { value: 'popoisson', type: 'command', options: [] },
                { value: 'poregress', type: 'command', options: [] },
                { value: 'sqrtlasso', type: 'command', options: [] },
                { value: 'xpoivregress', type: 'command', options: [] },
                { value: 'xpologit', type: 'command', options: [] },
                { value: 'xpopoisson', type: 'command', options: [] },
                { value: 'xporegress', type: 'command', options: [] },
                { value: 'help', type: 'command', options: [] },
                { value: 'break', type: 'keyword', options: [] },
                { value: 'class', type: 'keyword', options: [] },
                { value: 'continue', type: 'keyword', options: [] },
                { value: 'do', type: 'keyword', options: [] },
                { value: 'exp', type: 'command', options: [] },
                { value: 'for', type: 'keyword', options: [] },
                { value: 'ftof', type: 'keyword', options: [] },
                { value: 'goto', type: 'keyword', options: [] },
                { value: 'if', type: 'keyword', options: [] },
                { value: 'op arith', type: 'command', options: [] },
                { value: 'op assignment', type: 'command', options: [] },
                { value: 'op colon', type: 'command', options: [] },
                { value: 'op conditional', type: 'command', options: [] },
                { value: 'op increment', type: 'command', options: [] },
                { value: 'op join', type: 'command', options: [] },
                { value: 'op kronecker', type: 'command', options: [] },
                { value: 'op logical', type: 'command', options: [] },
                { value: 'op range', type: 'command', options: [] },
                { value: 'op transpose', type: 'command', options: [] },
                { value: 'optargs', type: 'command', options: [] },
                { value: 'pointers', type: 'command', options: [] },
                { value: 'pragma', type: 'keyword', options: [] },
                { value: 'reswords', type: 'command', options: [] },
                { value: 'return', type: 'keyword', options: [] },
                { value: 'struct', type: 'command', options: [] },
                { value: 'version', type: 'command', options: [] },
                { value: 'void', type: 'keyword', options: [] },
                { value: 'while', type: 'keyword', options: [] },
                { value: 'end', type: 'keyword', options: [] },
                { value: 'lmbuild', type: 'command', options: [] },
                { value: 'mata', type: 'command', options: [] },
                { value: 'mata clear', type: 'command', options: [] },
                { value: 'mata describe', type: 'command', options: [] },
                { value: 'mata drop', type: 'command', options: [] },
                { value: 'mata help', type: 'command', options: [] },
                { value: 'mata matsave', type: 'command', options: [] },
                { value: 'mata memory', type: 'command', options: [] },
                { value: 'mata mlib', type: 'command', options: [] },
                { value: 'mata mosave', type: 'command', options: [] },
                { value: 'mata rename', type: 'command', options: [] },
                { value: 'mata set', type: 'command', options: [] },
                { value: 'mata stata', type: 'command', options: [] },
                { value: 'mata which', type: 'command', options: [] },
                { value: 'namelists', type: 'command', options: [] },
                { value: 'abbrev()', type: 'mata function', options: [] },
                { value: 'abs()', type: 'mata function', options: [] },
                { value: 'adosubdir()', type: 'mata function', options: [] },
                { value: 'all()', type: 'mata function', options: [] },
                { value: 'args()', type: 'mata function', options: [] },
                { value: 'asarray()', type: 'mata function', options: [] },
                { value: 'AssociativeArray()', type: 'mata function', options: [] },
                { value: 'ascii()', type: 'mata function', options: [] },
                { value: 'uchar()', type: 'mata function', options: [] },
                { value: 'assert()', type: 'mata function', options: [] },
                { value: 'blockdiag()', type: 'mata function', options: [] },
                { value: 'bufio()', type: 'mata function', options: [] },
                { value: 'byteorder()', type: 'mata function', options: [] },
                { value: 'C()', type: 'mata function', options: [] },
                { value: 'c()', type: 'mata function', options: [] },
                { value: 'callersversion()', type: 'mata function', options: [] },
                { value: 'cat()', type: 'mata function', options: [] },
                { value: 'chdir()', type: 'mata function', options: [] },
                { value: 'cholesky()', type: 'mata function', options: [] },
                { value: 'cholinv()', type: 'mata function', options: [] },
                { value: 'cholsolve()', type: 'mata function', options: [] },
                { value: 'comb()', type: 'mata function', options: [] },
                { value: 'cond()', type: 'mata function', options: [] },
                { value: 'conj()', type: 'mata function', options: [] },
                { value: 'corr()', type: 'mata function', options: [] },
                { value: 'cross()', type: 'mata function', options: [] },
                { value: 'crossdev()', type: 'mata function', options: [] },
                { value: 'cvpermute()', type: 'mata function', options: [] },
                { value: 'date()', type: 'mata function', options: [] },
                { value: 'deriv()', type: 'mata function', options: [] },
                { value: 'designmatrix()', type: 'mata function', options: [] },
                { value: 'det()', type: 'mata function', options: [] },
                { value: 'diag()', type: 'mata function', options: [] },
                { value: 'diag()', type: 'mata function', options: [] },
                { value: 'diag0cnt()', type: 'mata function', options: [] },
                { value: 'diagonal()', type: 'mata function', options: [] },
                { value: 'dir()', type: 'mata function', options: [] },
                { value: 'direxists()', type: 'mata function', options: [] },
                { value: 'direxternal()', type: 'mata function', options: [] },
                { value: 'display()', type: 'mata function', options: [] },
                { value: 'displayas()', type: 'mata function', options: [] },
                { value: 'displayflush()', type: 'mata function', options: [] },
                { value: 'Dmatrix()', type: 'mata function', options: [] },
                { value: 'docx*()', type: 'mata function', options: [] },
                { value: 'dsign()', type: 'mata function', options: [] },
                { value: 'e()', type: 'mata function', options: [] },
                { value: 'editmissing()', type: 'mata function', options: [] },
                { value: 'edittoint()', type: 'mata function', options: [] },
                { value: 'edittozero()', type: 'mata function', options: [] },
                { value: 'editvalue()', type: 'mata function', options: [] },
                { value: 'eigensystem()', type: 'mata function', options: [] },
                { value: 'eigensystemselect( )', type: 'mata function', options: [] },
                { value: 'eltype()', type: 'mata function', options: [] },
                { value: 'epsilon()', type: 'mata function', options: [] },
                { value: 'equilrc()', type: 'mata function', options: [] },
                { value: 'error()', type: 'mata function', options: [] },
                { value: 'errprintf()', type: 'mata function', options: [] },
                { value: 'exit()', type: 'mata function', options: [] },
                { value: 'exp()', type: 'mata function', options: [] },
                { value: 'factorial()', type: 'mata function', options: [] },
                { value: 'favorspeed()', type: 'mata function', options: [] },
                { value: 'ferrortext()', type: 'mata function', options: [] },
                { value: 'fft()', type: 'mata function', options: [] },
                { value: 'fileexists()', type: 'mata function', options: [] },
                { value: 'fillmissing()', type: 'mata function', options: [] },
                { value: 'findexternal()', type: 'mata function', options: [] },
                { value: 'findfile()', type: 'mata function', options: [] },
                { value: 'floatround()', type: 'mata function', options: [] },
                { value: 'fmtwidth()', type: 'mata function', options: [] },
                { value: 'fopen()', type: 'mata function', options: [] },
                { value: 'fullsvd()', type: 'mata function', options: [] },
                { value: 'geigensystem()', type: 'mata function', options: [] },
                { value: 'ghessenbergd()', type: 'mata function', options: [] },
                { value: 'ghk( )', type: 'mata function', options: [] },
                { value: 'ghkfast( )', type: 'mata function', options: [] },
                { value: 'gschurd()', type: 'mata function', options: [] },
                { value: 'halton()', type: 'mata function', options: [] },
                { value: 'hash1()', type: 'mata function', options: [] },
                { value: 'hessenbergd()', type: 'mata function', options: [] },
                { value: 'Hilbert()', type: 'mata function', options: [] },
                { value: 'I()', type: 'mata function', options: [] },
                { value: 'inbase()', type: 'mata function', options: [] },
                { value: 'indexnot()', type: 'mata function', options: [] },
                { value: 'invorder()', type: 'mata function', options: [] },
                { value: 'invsym()', type: 'mata function', options: [] },
                { value: 'invtokens()', type: 'mata function', options: [] },
                { value: 'isascii()', type: 'mata function', options: [] },
                { value: 'isdiagonal()', type: 'mata function', options: [] },
                { value: 'isfleeting()', type: 'mata function', options: [] },
                { value: 'isreal()', type: 'mata function', options: [] },
                { value: 'isrealvalues()', type: 'mata function', options: [] },
                { value: 'issamefile()', type: 'mata function', options: [] },
                { value: 'issymmetric()', type: 'mata function', options: [] },
                { value: 'isview()', type: 'mata function', options: [] },
                { value: 'J()', type: 'mata function', options: [] },
                { value: 'Kmatrix()', type: 'mata function', options: [] },
                { value: 'lapack()', type: 'mata function', options: [] },
                { value: 'ldl()', type: 'mata function', options: [] },
                { value: 'LinearProgram()', type: 'mata function', options: [] },
                { value: 'liststruct()', type: 'mata function', options: [] },
                { value: 'Lmatrix()', type: 'mata function', options: [] },
                { value: 'logit()', type: 'mata function', options: [] },
                { value: 'lowertriangle()', type: 'mata function', options: [] },
                { value: 'lud()', type: 'mata function', options: [] },
                { value: 'luinv()', type: 'mata function', options: [] },
                { value: 'lusolve()', type: 'mata function', options: [] },
                { value: 'makesymmetric()', type: 'mata function', options: [] },
                { value: 'matexpsym()', type: 'mata function', options: [] },
                { value: 'matpowersym()', type: 'mata function', options: [] },
                { value: 'mean()', type: 'mata function', options: [] },
                { value: 'mindouble()', type: 'mata function', options: [] },
                { value: 'minindex()', type: 'mata function', options: [] },
                { value: 'minmax()', type: 'mata function', options: [] },
                { value: 'missing()', type: 'mata function', options: [] },
                { value: 'missingof()', type: 'mata function', options: [] },
                { value: 'mod()', type: 'mata function', options: [] },
                { value: 'moptimize()', type: 'mata function', options: [] },
                { value: 'more()', type: 'mata function', options: [] },
                { value: 'mvnormal( )', type: 'mata function', options: [] },
                { value: 'negate()', type: 'mata function', options: [] },
                { value: 'norm()', type: 'mata function', options: [] },
                { value: 'normal()', type: 'mata function', options: [] },
                { value: 'optimize()', type: 'mata function', options: [] },
                { value: 'panelsetup()', type: 'mata function', options: [] },
                { value: 'panelsum()', type: 'mata function', options: [] },
                { value: 'pathjoin()', type: 'mata function', options: [] },
                { value: 'Pdf*()', type: 'mata function', options: [] },
                { value: 'pinv()', type: 'mata function', options: [] },
                { value: 'polyeval()', type: 'mata function', options: [] },
                { value: 'printf()', type: 'mata function', options: [] },
                { value: 'qrd()', type: 'mata function', options: [] },
                { value: 'qrinv()', type: 'mata function', options: [] },
                { value: 'qrsolve()', type: 'mata function', options: [] },
                { value: 'quadcross()', type: 'mata function', options: [] },
                { value: 'Quadrature()', type: 'mata function', options: [] },
                { value: 'range()', type: 'mata function', options: [] },
                { value: 'rank()', type: 'mata function', options: [] },
                { value: 'Re()', type: 'mata function', options: [] },
                { value: 'reldif()', type: 'mata function', options: [] },
                { value: 'rows()', type: 'mata function', options: [] },
                { value: 'rowshape()', type: 'mata function', options: [] },
                { value: 'runiform()', type: 'mata function', options: [] },
                { value: 'runningsum()', type: 'mata function', options: [] },
                { value: 'schurd()', type: 'mata function', options: [] },
                { value: 'select()', type: 'mata function', options: [] },
                { value: 'setbreakintr()', type: 'mata function', options: [] },
                { value: 'sign()', type: 'mata function', options: [] },
                { value: 'sin()', type: 'mata function', options: [] },
                { value: 'sizeof()', type: 'mata function', options: [] },
                { value: 'solve_tol()', type: 'mata function', options: [] },
                { value: 'solvelower()', type: 'mata function', options: [] },
                { value: 'solvenl()', type: 'mata function', options: [] },
                { value: 'sort()', type: 'mata function', options: [] },
                { value: 'soundex()', type: 'mata function', options: [] },
                { value: 'spline3()', type: 'mata function', options: [] },
                { value: 'sqrt()', type: 'mata function', options: [] },
                { value: 'st_addobs()', type: 'mata function', options: [] },
                { value: 'st_addvar()', type: 'mata function', options: [] },
                { value: 'st_data()', type: 'mata function', options: [] },
                { value: 'st_dir()', type: 'mata function', options: [] },
                { value: 'st_dropvar()', type: 'mata function', options: [] },
                { value: 'st_frame*()', type: 'mata function', options: [] },
                { value: 'st_global()', type: 'mata function', options: [] },
                { value: 'st_isfmt()', type: 'mata function', options: [] },
                { value: 'st_isname()', type: 'mata function', options: [] },
                { value: 'st_local()', type: 'mata function', options: [] },
                { value: 'st_macroexpand()', type: 'mata function', options: [] },
                { value: 'st_matrix()', type: 'mata function', options: [] },
                { value: 'st_numscalar()', type: 'mata function', options: [] },
                { value: 'st_nvar()', type: 'mata function', options: [] },
                { value: 'st_rclear()', type: 'mata function', options: [] },
                { value: 'st_store()', type: 'mata function', options: [] },
                { value: 'st_subview()', type: 'mata function', options: [] },
                { value: 'st_tempname()', type: 'mata function', options: [] },
                { value: 'st_tsrevar()', type: 'mata function', options: [] },
                { value: 'st_updata()', type: 'mata function', options: [] },
                { value: 'st_varformat()', type: 'mata function', options: [] },
                { value: 'st_varindex()', type: 'mata function', options: [] },
                { value: 'st_varname()', type: 'mata function', options: [] },
                { value: 'st_varrename()', type: 'mata function', options: [] },
                { value: 'st_vartype()', type: 'mata function', options: [] },
                { value: 'st_view()', type: 'mata function', options: [] },
                { value: 'st_viewvars()', type: 'mata function', options: [] },
                { value: 'st_vlexists()', type: 'mata function', options: [] },
                { value: 'stata()', type: 'mata function', options: [] },
                { value: 'stataversion()', type: 'mata function', options: [] },
                { value: 'ustrtoname()', type: 'mata function', options: [] },
                { value: 'subinstr()', type: 'mata function', options: [] },
                { value: 'substr()', type: 'mata function', options: [] },
                { value: 'usubstr()', type: 'mata function', options: [] },
                { value: 'Toeplitz()', type: 'mata function', options: [] },
                { value: 'transpose()', type: 'mata function', options: [] },
                { value: 'uniqrows()', type: 'mata function', options: [] },
                { value: 'ustrunescape()', type: 'mata function', options: [] },
                { value: 'valofexternal()', type: 'mata function', options: [] },
                { value: 'vec()', type: 'mata function', options: [] },
                { value: 'estat df', type: 'command', options: [] },
                { value: 'estat group', type: 'command', options: [] },
                { value: 'estat icc', type: 'command', options: [] },
                { value: 'estat recovariance', type: 'command', options: [] },
                { value: 'estat sd', type: 'command', options: [] },
                { value: 'estat wcorrelation', type: 'command', options: [] },
                { value: 'mecloglog', type: 'command', options: [] },
                { value: 'meglm', type: 'command', options: [] },
                { value: 'meintreg', type: 'command', options: [] },
                { value: 'melogit', type: 'command', options: [] },
                { value: 'menbreg', type: 'command', options: [] },
                { value: 'menl', type: 'command', options: [] },
                { value: 'meologit', type: 'command', options: [] },
                { value: 'meoprobit', type: 'command', options: [] },
                { value: 'mepoisson', type: 'command', options: [] },
                { value: 'meprobit', type: 'command', options: [] },
                { value: 'mestreg', type: 'command', options: [] },
                { value: 'metobit', type: 'command', options: [] },
                { value: 'mixed', type: 'command', options: [] },
                { value: 'meta', type: 'command', options: [] },
                { value: 'meta data', type: 'command', options: [] },
                { value: 'meta esize', type: 'command', options: [] },
                { value: 'meta set', type: 'command', options: [] },
                { value: 'meta update', type: 'command', options: [] },
                { value: 'meta forestplot', type: 'command', options: [] },
                { value: 'meta summarize', type: 'command', options: [] },
                { value: 'meta galbraithplot', type: 'command', options: [] },
                { value: 'metalabbeplot', type: 'command', options: [] },
                { value: 'meta regress', type: 'command', options: [] },
                { value: 'estat bubbleplot', type: 'command', options: [] },
                { value: 'meta funnelplot', type: 'command', options: [] },
                { value: 'meta bias', type: 'command', options: [] },
                { value: 'meta trimfill', type: 'command', options: [] },
                { value: 'meta mvregress', type: 'command', options: [] },
                { value: 'estat heterogeneity', type: 'command', options: [] },
                { value: 'estat recovariance', type: 'command', options: [] },
                { value: 'estat sd', type: 'command', options: [] },
                { value: 'mi add', type: 'command', options: [] },
                { value: 'mi append', type: 'command', options: [] },
                { value: 'mi convert', type: 'command', options: [] },
                { value: 'mi copy', type: 'command', options: [] },
                { value: 'mi describe', type: 'command', options: [] },
                { value: 'mi erase', type: 'command', options: [] },
                { value: 'mi estimate', type: 'command', options: [] },
                { value: 'mi estimate using', type: 'command', options: [] },
                { value: 'mi estimate postestimation', type: 'command', options: [] },
                { value: 'mi expand', type: 'command', options: [] },
                { value: 'mi export', type: 'command', options: [] },
                { value: 'mi export ice', type: 'command', options: [] },
                { value: 'mi export nhanes1', type: 'command', options: [] },
                { value: 'mi extract', type: 'command', options: [] },
                { value: 'mi import', type: 'command', options: [] },
                { value: 'mi import flong', type: 'command', options: [] },
                { value: 'mi import flongsep', type: 'command', options: [] },
                { value: 'mi import ice', type: 'command', options: [] },
                { value: 'mi import nhanes1', type: 'command', options: [] },
                { value: 'mi import wide', type: 'command', options: [] },
                { value: 'mi impute', type: 'command', options: [] },
                { value: 'mi impute chained', type: 'command', options: [] },
                { value: 'mi impute intreg', type: 'command', options: [] },
                { value: 'mi impute logit', type: 'command', options: [] },
                { value: 'mi impute mlogit', type: 'command', options: [] },
                { value: 'mi impute monotone', type: 'command', options: [] },
                { value: 'mi impute mvn', type: 'command', options: [] },
                { value: 'mi impute nbreg', type: 'command', options: [] },
                { value: 'mi impute ologit', type: 'command', options: [] },
                { value: 'mi impute pmm', type: 'command', options: [] },
                { value: 'mi impute poisson', type: 'command', options: [] },
                { value: 'mi impute regress', type: 'command', options: [] },
                { value: 'mi impute truncreg', type: 'command', options: [] },
                { value: 'mi impute usermethod', type: 'command', options: [] },
                { value: 'mi merge', type: 'command', options: [] },
                { value: 'mi misstable', type: 'command', options: [] },
                { value: 'mi passive', type: 'command', options: [] },
                { value: 'mi predict', type: 'command', options: [] },
                { value: 'mi ptrace', type: 'command', options: [] },
                { value: 'mi rename', type: 'command', options: [] },
                { value: 'mi replace0', type: 'command', options: [] },
                { value: 'mi reset', type: 'command', options: [] },
                { value: 'mi reshape', type: 'command', options: [] },
                { value: 'mi select', type: 'command', options: [] },
                { value: 'mi set', type: 'command', options: [] },
                { value: 'mi stsplit', type: 'command', options: [] },
                { value: 'mi test', type: 'command', options: [] },
                { value: 'mi update', type: 'command', options: [] },
                { value: 'mi varying', type: 'command', options: [] },
                { value: 'mi xeq', type: 'command', options: [] },
                { value: 'mi XXXset', type: 'command', options: [] },
                { value: 'alpha', type: 'command', options: [] },
                { value: 'biplot', type: 'command', options: [] },
                { value: 'ca', type: 'command', options: [] },
                { value: 'candisc', type: 'command', options: [] },
                { value: 'canon', type: 'command', options: [] },
                { value: 'cluster', type: 'command', options: [] },
                { value: 'clustermat', type: 'command', options: [] },
                { value: 'cluster dendrogram', type: 'command', options: [] },
                { value: 'cluster generate', type: 'command', options: [] },
                { value: 'cluster kmeans', type: 'command', options: [] },
                { value: 'cluster kmedians', type: 'command', options: [] },
                { value: 'cluster linkage', type: 'command', options: [] },
                { value: 'cluster stop', type: 'command', options: [] },
                { value: 'cluster utility', type: 'command', options: [] },
                { value: 'cluster query', type: 'command', options: [] },
                { value: 'cluster set', type: 'command', options: [] },
                { value: 'cluster delete', type: 'command', options: [] },
                { value: 'cluster parsedistance', type: 'command', options: [] },
                { value: 'cluster measures', type: 'command', options: [] },
                { value: 'discrim', type: 'command', options: [] },
                { value: 'discrim estat', type: 'command', options: [] },
                { value: 'discrim knn', type: 'command', options: [] },
                { value: 'discrim lda', type: 'command', options: [] },
                { value: 'discrim logistic', type: 'command', options: [] },
                { value: 'discrim qda', type: 'command', options: [] },
                { value: 'factor', type: 'command', options: [] },
                { value: 'hotelling', type: 'command', options: [] },
                { value: 'manova', type: 'command', options: [] },
                { value: 'matrix dissimilarity', type: 'command', options: [] },
                { value: 'mca', type: 'command', options: [] },
                { value: 'mds', type: 'command', options: [] },
                { value: 'mdslong', type: 'command', options: [] },
                { value: 'mdsmat', type: 'command', options: [] },
                { value: 'measure option', type: 'command', options: [] },
                { value: 'mvreg', type: 'command', options: [] },
                { value: 'mvtest', type: 'command', options: [] },
                { value: 'mvtest correlations', type: 'command', options: [] },
                { value: 'mvtest covariances', type: 'command', options: [] },
                { value: 'mvtest means', type: 'command', options: [] },
                { value: 'mvtest normality', type: 'command', options: [] },
                { value: 'pca', type: 'command', options: [] },
                { value: 'procrustes', type: 'command', options: [] },
                { value: 'rotate', type: 'command', options: [] },
                { value: 'rotatemat', type: 'command', options: [] },
                { value: 'scoreplot', type: 'command', options: [] },
                { value: 'screeplot', type: 'command', options: [] },
                { value: 'break', type: 'command', options: [] },
                { value: 'nobreak', type: 'command', options: [] },
                { value: 'byable', type: 'command', options: [] },
                { value: 'capture', type: 'command', options: [] },
                { value: 'char', type: 'command', options: [] },
                { value: 'class', type: 'command', options: [] },
                { value: 'class exit', type: 'command', options: [] },
                { value: 'classutil', type: 'command', options: [] },
                { value: 'comments', type: 'command', options: [] },
                { value: 'confirm', type: 'command', options: [] },
                { value: 'continue', type: 'command', options: [] },
                { value: 'creturn', type: 'command', options: [] },
                { value: 'datasignature', type: 'command', options: [] },
                { value: '#delimit', type: 'command', options: [] },
                { value: 'discard', type: 'command', options: [] },
                { value: 'display', type: 'command', options: [] },
                { value: 'ereturn', type: 'command', options: [] },
                { value: 'error', type: 'command', options: [] },
                { value: 'estimates', type: 'command', options: [] },
                { value: 'exit', type: 'command', options: [] },
                { value: 'file', type: 'command', options: [] },
                { value: 'findfile', type: 'command', options: [] },
                { value: 'foreach', type: 'command', options: [] },
                { value: 'forvalues', type: 'command', options: [] },
                { value: 'frame post', type: 'command', options: [] },
                { value: 'fvexpand', type: 'command', options: [] },
                { value: 'gettoken', type: 'command', options: [] },
                { value: 'if', type: 'command', options: [] },
                { value: 'include', type: 'command', options: [] },
                { value: 'javacall', type: 'command', options: [] },
                { value: 'levelsof', type: 'command', options: [] },
                { value: 'macro', type: 'command', options: [] },
                { value: 'macro lists', type: 'command', options: [] },
                { value: 'makecns', type: 'command', options: [] },
                { value: 'mark', type: 'command', options: [] },
                { value: 'matlist', type: 'command', options: [] },
                { value: 'matrix', type: 'command', options: [] },
                { value: 'matrix accum', type: 'command', options: [] },
                { value: 'matrix define', type: 'command', options: [] },
                { value: 'matrix dissimilarity', type: 'command', options: [] },
                { value: 'matrix eigenvalues', type: 'command', options: [] },
                { value: 'matrix get', type: 'command', options: [] },
                { value: 'matrix mkmat', type: 'command', options: [] },
                { value: 'matrix rowjoinbyname', type: 'command', options: [] },
                { value: 'matrix rownames', type: 'command', options: [] },
                { value: 'matrix score', type: 'command', options: [] },
                { value: 'matrix svd', type: 'command', options: [] },
                { value: 'matrix symeigen', type: 'command', options: [] },
                { value: 'matrix utility', type: 'command', options: [] },
                { value: 'more', type: 'command', options: [] },
                { value: 'nopreserve option', type: 'command', options: [] },
                { value: 'numlist', type: 'command', options: [] },
                { value: 'pause', type: 'command', options: [] },
                { value: 'plugin', type: 'command', options: [] },
                { value: 'postfile', type: 'command', options: [] },
                { value: 'predict', type: 'command', options: [] },
                { value: 'preserve', type: 'command', options: [] },
                { value: 'program', type: 'command', options: [] },
                { value: 'program properties', type: 'command', options: [] },
                { value: 'quietly', type: 'command', options: [] },
                { value: 'return', type: 'command', options: [] },
                { value: 'return', type: 'command', options: [] },
                { value: 'rmcoll', type: 'command', options: [] },
                { value: 'rmsg', type: 'command', options: [] },
                { value: 'robust', type: 'command', options: [] },
                { value: 'scalar', type: 'command', options: [] },
                { value: 'serset', type: 'command', options: [] },
                { value: 'set locale functions', type: 'command', options: [] },
                { value: 'set locale ui', type: 'command', options: [] },
                { value: 'set sortmethod', type: 'command', options: [] },
                { value: 'set sortrngstate', type: 'command', options: [] },
                { value: 'signestimationsample', type: 'command', options: [] },
                { value: 'sleep', type: 'command', options: [] },
                { value: 'smcl', type: 'command', options: [] },
                { value: 'sortpreserve', type: 'command', options: [] },
                { value: 'syntax', type: 'command', options: [] },
                { value: 'sysdir', type: 'command', options: [] },
                { value: 'tabdisp', type: 'command', options: [] },
                { value: 'timer', type: 'command', options: [] },
                { value: 'tokenize', type: 'command', options: [] },
                { value: 'trace', type: 'command', options: [] },
                { value: 'unab', type: 'command', options: [] },
                { value: 'unabcmd', type: 'command', options: [] },
                { value: 'varabbrev', type: 'command', options: [] },
                { value: 'version', type: 'command', options: [] },
                { value: 'viewsource', type: 'command', options: [] },
                { value: 'while', type: 'command', options: [] },
                { value: 'window fopen', type: 'command', options: [] },
                { value: 'window manage', type: 'command', options: [] },
                { value: 'window menu', type: 'command', options: [] },
                { value: 'window push', type: 'command', options: [] },
                { value: 'window stopbox', type: 'command', options: [] },
                { value: 'power', type: 'command', options: [] },
                { value: 'power usermethod', type: 'command', options: [] },
                { value: 'power, graph', type: 'command', options: [] },
                { value: 'power, table', type: 'command', options: [] },
                { value: 'power onemean', type: 'command', options: [] },
                { value: 'power onemean, cluster', type: 'command', options: [] },
                { value: 'power twomeans', type: 'command', options: [] },
                { value: 'power twomeans, cluster', type: 'command', options: [] },
                { value: 'power pairedmeans', type: 'command', options: [] },
                { value: 'power oneproportion', type: 'command', options: [] },
                { value: 'power oneproportion, cluster', type: 'command', options: [] },
                { value: 'power twoproportions', type: 'command', options: [] },
                { value: 'power twoproportions, cluster', type: 'command', options: [] },
                { value: 'power pairedproportions', type: 'command', options: [] },
                { value: 'power onevariance', type: 'command', options: [] },
                { value: 'power twovariances', type: 'command', options: [] },
                { value: 'power onecorrelation', type: 'command', options: [] },
                { value: 'power twocorrelations', type: 'command', options: [] },
                { value: 'power oneway', type: 'command', options: [] },
                { value: 'power twoway', type: 'command', options: [] },
                { value: 'power repeated', type: 'command', options: [] },
                { value: 'power oneslope', type: 'command', options: [] },
                { value: 'power rsquared', type: 'command', options: [] },
                { value: 'power pcorr', type: 'command', options: [] },
                { value: 'power cmh', type: 'command', options: [] },
                { value: 'power mcc', type: 'command', options: [] },
                { value: 'power trend', type: 'command', options: [] },
                { value: 'power cox', type: 'command', options: [] },
                { value: 'power exponential', type: 'command', options: [] },
                { value: 'power logrank', type: 'command', options: [] },
                { value: 'power logrank, cluster', type: 'command', options: [] },
                { value: 'about', type: 'command', options: [] },
                { value: 'ado update', type: 'command', options: [] },
                { value: 'ameans', type: 'command', options: [] },
                { value: 'anova', type: 'command', options: [] },
                { value: 'areg', type: 'command', options: [] },
                { value: 'betareg', type: 'command', options: [] },
                { value: 'binreg', type: 'command', options: [] },
                { value: 'biprobit', type: 'command', options: [] },
                { value: 'bitest', type: 'command', options: [] },
                { value: 'bootstrap', type: 'command', options: [] },
                { value: 'boxcox', type: 'command', options: [] },
                { value: 'brier', type: 'command', options: [] },
                { value: 'bsample', type: 'command', options: [] },
                { value: 'bstat', type: 'command', options: [] },
                { value: 'centile', type: 'command', options: [] },
                { value: 'churdle', type: 'command', options: [] },
                { value: 'ci', type: 'command', options: [] },
                { value: 'clogit', type: 'command', options: [] },
                { value: 'cloglog', type: 'command', options: [] },
                { value: 'cls', type: 'command', options: [] },
                { value: 'cnsreg', type: 'command', options: [] },
                { value: 'constraint', type: 'command', options: [] },
                { value: 'contrast', type: 'command', options: [] },
                { value: 'copyright', type: 'command', options: [] },
                { value: 'correlate', type: 'command', options: [] },
                { value: 'cpoisson', type: 'command', options: [] },
                { value: 'cumul', type: 'command', options: [] },
                { value: 'cusum', type: 'command', options: [] },
                { value: 'db', type: 'command', options: [] },
                { value: 'display', type: 'command', options: [] },
                { value: 'do', type: 'command', options: [] },
                { value: 'doedit', type: 'command', options: [] },
                { value: 'dotplot', type: 'command', options: [] },
                { value: 'dstdize', type: 'command', options: [] },
                { value: 'dydx', type: 'command', options: [] },
                { value: 'eform option', type: 'command', options: [] },
                { value: 'eivreg', type: 'command', options: [] },
                { value: 'Epitab', type: 'command', options: [] },
                { value: 'esize', type: 'command', options: [] },
                { value: 'estat', type: 'command', options: [] },
                { value: 'estat classification', type: 'command', options: [] },
                { value: 'estat gof', type: 'command', options: [] },
                { value: 'estat ic', type: 'command', options: [] },
                { value: 'estat summarize', type: 'command', options: [] },
                { value: 'estat vce', type: 'command', options: [] },
                { value: 'estimates', type: 'command', options: [] },
                { value: 'estimates describe', type: 'command', options: [] },
                { value: 'estimates for', type: 'command', options: [] },
                { value: 'estimates notes', type: 'command', options: [] },
                { value: 'estimates replay', type: 'command', options: [] },
                { value: 'estimates save', type: 'command', options: [] },
                { value: 'estimates selected', type: 'command', options: [] },
                { value: 'estimates stats', type: 'command', options: [] },
                { value: 'estimates store', type: 'command', options: [] },
                { value: 'estimates table', type: 'command', options: [] },
                { value: 'estimates title', type: 'command', options: [] },
                { value: 'etable', type: 'command', options: [] },
                { value: 'exit', type: 'command', options: [] },
                { value: 'exlogistic', type: 'command', options: [] },
                { value: 'expoisson', type: 'command', options: [] },
                { value: 'fp', type: 'command', options: [] },
                { value: 'fracreg', type: 'command', options: [] },
                { value: 'frontier', type: 'command', options: [] },
                { value: 'fvrevar', type: 'command', options: [] },
                { value: 'fvset', type: 'command', options: [] },
                { value: 'gllamm', type: 'command', options: [] },
                { value: 'glm', type: 'command', options: [] },
                { value: 'gmm', type: 'command', options: [] },
                { value: 'grmeanby', type: 'command', options: [] },
                { value: 'hausman', type: 'command', options: [] },
                { value: 'heckman', type: 'command', options: [] },
                { value: 'heckoprobit', type: 'command', options: [] },
                { value: 'heckpoisson', type: 'command', options: [] },
                { value: 'heckprobit', type: 'command', options: [] },
                { value: 'icc', type: 'command', options: [] },
                { value: 'jackknife', type: 'command', options: [] },
                { value: 'kappa', type: 'command', options: [] },
                { value: 'ladder', type: 'command', options: [] },
                { value: 'margins', type: 'command', options: [] },
                { value: 'nbreg', type: 'command', options: [] },
                { value: 'net search', type: 'command', options: [] },
                { value: 'npregress series', type: 'command', options: [] },
                { value: 'nptrend', type: 'command', options: [] },
                { value: 'ologit', type: 'command', options: [] },
                { value: 'pcorr', type: 'command', options: [] },
                { value: 'probit', type: 'command', options: [] },
                { value: 'pwcompare', type: 'command', options: [] },
                { value: 'QC', type: 'command', options: [] },
                { value: 'query', type: 'command', options: [] },
                { value: 'ranksum', type: 'command', options: [] },
                { value: '#review', type: 'command', options: [] },
                { value: 'roctab', type: 'command', options: [] },
                { value: 'scobit', type: 'command', options: [] },
                { value: 'set seed', type: 'command', options: [] },
                { value: 'tpoisson', type: 'command', options: [] },
                { value: 'tpoisson', type: 'command', options: [] },
                { value: 'translate', type: 'command', options: [] },
                { value: 'truncreg', type: 'command', options: [] },
                { value: 'truncreg', type: 'command', options: [] },
                { value: 'ttest', type: 'command', options: [] },
                { value: 'update', type: 'command', options: [] },
                { value: 'vce option', type: 'command', options: [] },
                { value: 'table intro', type: 'command', options: [] },
                { value: 'table oneway', type: 'command', options: [] },
                { value: 'which', type: 'command', options: [] },
                { value: 'zinb', type: 'command', options: [] },
                { value: 'docx2pdf', type: 'command', options: [] },
                { value: 'dyndoc', type: 'command', options: [] },
                { value: 'dyntext', type: 'command', options: [] },
                { value: 'html2docx', type: 'command', options: [] },
                { value: 'markdown', type: 'command', options: [] },
                { value: 'putdocx intro', type: 'command', options: [] },
                { value: 'putdocx begin', type: 'command', options: [] },
                { value: 'putdocx collect', type: 'command', options: [] },
                { value: 'putdocx pagebreak', type: 'command', options: [] },
                { value: 'putdocx paragraph', type: 'command', options: [] },
                { value: 'putdocx table', type: 'command', options: [] },
                { value: 'putexcel', type: 'command', options: [] },
                { value: 'putexcel advanced', type: 'command', options: [] },
                { value: 'putpdf intro', type: 'command', options: [] },
                { value: 'putpdf begin', type: 'command', options: [] },
                { value: 'putpdf collect', type: 'command', options: [] },
                { value: 'putpdf pagebreak', type: 'command', options: [] },
                { value: 'putpdf paragraph', type: 'command', options: [] },
                { value: 'putpdf table', type: 'command', options: [] },
                { value: 'estat eform', type: 'command', options: [] },
                { value: 'estat eqgof', type: 'command', options: [] },
                { value: 'estat eqtest', type: 'command', options: [] },
                { value: 'estat framework', type: 'command', options: [] },
                { value: 'estat ggof', type: 'command', options: [] },
                { value: 'estat ginvariant', type: 'command', options: [] },
                { value: 'estat gof', type: 'command', options: [] },
                { value: 'estat lcgof', type: 'command', options: [] },
                { value: 'estat lcmean', type: 'command', options: [] },
                { value: 'estat lcprob', type: 'command', options: [] },
                { value: 'estat mindices', type: 'command', options: [] },
                { value: 'estat residuals', type: 'command', options: [] },
                { value: 'estat scoretests', type: 'command', options: [] },
                { value: 'estat sd', type: 'command', options: [] },
                { value: 'estat stable', type: 'command', options: [] },
                { value: 'estat stdize', type: 'command', options: [] },
                { value: 'estat summarize', type: 'command', options: [] },
                { value: 'estat teffects', type: 'command', options: [] },
                { value: 'gsem', type: 'command', options: [] },
                { value: 'lincom', type: 'command', options: [] },
                { value: 'lrtest', type: 'command', options: [] },
                { value: 'nlcom', type: 'command', options: [] },
                { value: 'sem', type: 'command', options: [] },
                { value: 'ssd', type: 'command', options: [] },
                { value: 'test', type: 'command', options: [] },
                { value: 'testnl', type: 'command', options: [] },
                { value: 'estat moran', type: 'command', options: [] },
                { value: 'grmap', type: 'command', options: [] },
                { value: 'spbalance', type: 'command', options: [] },
                { value: 'spcompress', type: 'command', options: [] },
                { value: 'spdistance', type: 'command', options: [] },
                { value: 'spgenerate', type: 'command', options: [] },
                { value: 'spivregress', type: 'command', options: [] },
                { value: 'spmatrix', type: 'command', options: [] },
                { value: 'spmatrix copy', type: 'command', options: [] },
                { value: 'spmatrix create', type: 'command', options: [] },
                { value: 'spmatrix drop', type: 'command', options: [] },
                { value: 'spmatrix export', type: 'command', options: [] },
                { value: 'spmatrix fromdata', type: 'command', options: [] },
                { value: 'spmatrix import', type: 'command', options: [] },
                { value: 'spmatrix matafromsp', type: 'command', options: [] },
                { value: 'spmatrix normalize', type: 'command', options: [] },
                { value: 'spmatrix note', type: 'command', options: [] },
                { value: 'spmatrix save', type: 'command', options: [] },
                { value: 'spmatrix spfrommata', type: 'command', options: [] },
                { value: 'spmatrix summarize', type: 'command', options: [] },
                { value: 'spmatrix use', type: 'command', options: [] },
                { value: 'spmatrix userdefined', type: 'command', options: [] },
                { value: 'spregress', type: 'command', options: [] },
                { value: 'spset', type: 'command', options: [] },
                { value: 'spshape2dta', type: 'command', options: [] },
                { value: 'spxtregress', type: 'command', options: [] },
                { value: 'ct', type: 'command', options: [] },
                { value: 'ctset', type: 'command', options: [] },
                { value: 'cttost', type: 'command', options: [] },
                { value: 'ltable', type: 'command', options: [] },
                { value: 'snapspan', type: 'command', options: [] },
                { value: 'st', type: 'command', options: [] },
                { value: 'st is', type: 'command', options: [] },
                { value: 'stbase', type: 'command', options: [] },
                { value: 'stci', type: 'command', options: [] },
                { value: 'stcox', type: 'command', options: [] },
                { value: 'stcrreg', type: 'command', options: [] },
                { value: 'stcurve', type: 'command', options: [] },
                { value: 'stdescribe', type: 'command', options: [] },
                { value: 'stfill', type: 'command', options: [] },
                { value: 'stgen', type: 'command', options: [] },
                { value: 'stintcox', type: 'command', options: [] },
                { value: 'stintreg', type: 'command', options: [] },
                { value: 'stir', type: 'command', options: [] },
                { value: 'stptime', type: 'command', options: [] },
                { value: 'strate', type: 'command', options: [] },
                { value: 'streg', type: 'command', options: [] },
                { value: 'sts', type: 'command', options: [] },
                { value: 'sts generate', type: 'command', options: [] },
                { value: 'sts graph', type: 'command', options: [] },
                { value: 'sts list', type: 'command', options: [] },
                { value: 'sts test', type: 'command', options: [] },
                { value: 'stset', type: 'command', options: [] },
                { value: 'stsplit', type: 'command', options: [] },
                { value: 'stsum', type: 'command', options: [] },
                { value: 'sttocc', type: 'command', options: [] },
                { value: 'sttoct', type: 'command', options: [] },
                { value: 'stvary', type: 'command', options: [] },
                { value: 'svy', type: 'command', options: [] },
                { value: 'svy bootstrap', type: 'command', options: [] },
                { value: 'svy brr', type: 'command', options: [] },
                { value: 'svy estimation', type: 'command', options: [] },
                { value: 'svy jackknife', type: 'command', options: [] },
                { value: 'svy postestimation', type: 'command', options: [] },
                { value: 'svy sdr', type: 'command', options: [] },
                { value: 'svy: tabulate oneway', type: 'command', options: [] },
                { value: 'svy: tabulate twoway', type: 'command', options: [] },
                { value: 'svydescribe', type: 'command', options: [] },
                { value: 'svymarkout', type: 'command', options: [] },
                { value: 'svyset', type: 'command', options: [] },
                { value: 'collect get', type: 'command', options: [] },
                { value: 'collect addtags', type: 'command', options: [] },
                { value: 'collect clear', type: 'command', options: [] },
                { value: 'collect combine', type: 'command', options: [] },
                { value: 'collect copy', type: 'command', options: [] },
                { value: 'collect create', type: 'command', options: [] },
                { value: 'collect dims', type: 'command', options: [] },
                { value: 'collect dir', type: 'command', options: [] },
                { value: 'collect drop', type: 'command', options: [] },
                { value: 'collect label', type: 'command', options: [] },
                { value: 'collect levelsof', type: 'command', options: [] },
                { value: 'collect notes', type: 'command', options: [] },
                { value: 'collect query', type: 'command', options: [] },
                { value: 'collect recode', type: 'command', options: [] },
                { value: 'collect remap', type: 'command', options: [] },
                { value: 'collect rename', type: 'command', options: [] },
                { value: 'collect save', type: 'command', options: [] },
                { value: 'collect set', type: 'command', options: [] },
                { value: 'collect stars', type: 'command', options: [] },
                { value: 'collect title', type: 'command', options: [] },
                { value: 'collect use', type: 'command', options: [] },
                { value: 'collect layout', type: 'command', options: [] },
                { value: 'collect preview', type: 'command', options: [] },
                { value: 'collect export', type: 'command', options: [] },
                { value: 'collect style autolevels', type: 'command', options: [] },
                { value: 'collect style cell', type: 'command', options: [] },
                { value: 'collect style clear', type: 'command', options: [] },
                { value: 'collect style column', type: 'command', options: [] },
                { value: 'collect style cons', type: 'command', options: [] },
                { value: 'collect style header', type: 'command', options: [] },
                { value: 'collect style html', type: 'command', options: [] },
                { value: 'collect style notes', type: 'command', options: [] },
                { value: 'collect style putdocx', type: 'command', options: [] },
                { value: 'collect style putpdf', type: 'command', options: [] },
                { value: 'collect style row', type: 'command', options: [] },
                { value: 'collect style save', type: 'command', options: [] },
                { value: 'collect style showbase', type: 'command', options: [] },
                { value: 'collect style showempty', type: 'command', options: [] },
                { value: 'collect style showomit', type: 'command', options: [] },
                { value: 'collect style table', type: 'command', options: [] },
                { value: 'collect style tex', type: 'command', options: [] },
                { value: 'collect style title', type: 'command', options: [] },
                { value: 'collect style use', type: 'command', options: [] },
                { value: 'set collect_double', type: 'command', options: [] },
                { value: 'set collect_label', type: 'command', options: [] },
                { value: 'set collect_style', type: 'command', options: [] },
                { value: 'set collect_warn', type: 'command', options: [] },
                { value: 'set etable_style', type: 'command', options: [] },
                { value: 'set table_style', type: 'command', options: [] },
                { value: 'didregress', type: 'command', options: [] },
                { value: 'eteffects', type: 'command', options: [] },
                { value: 'etpoisson', type: 'command', options: [] },
                { value: 'etregress', type: 'command', options: [] },
                { value: 'stteffects', type: 'command', options: [] },
                { value: 'stteffects intro', type: 'command', options: [] },
                { value: 'stteffects ipw', type: 'command', options: [] },
                { value: 'stteffects ipwra', type: 'command', options: [] },
                { value: 'stteffects ra', type: 'command', options: [] },
                { value: 'stteffects wra', type: 'command', options: [] },
                { value: 'tebalance', type: 'command', options: [] },
                { value: 'tebalance box', type: 'command', options: [] },
                { value: 'tebalance density', type: 'command', options: [] },
                { value: 'tebalance overid', type: 'command', options: [] },
                { value: 'tebalance summarize', type: 'command', options: [] },
                { value: 'teffects', type: 'command', options: [] },
                { value: 'teffects intro', type: 'command', options: [] },
                { value: 'teffects intro advanced', type: 'command', options: [] },
                { value: 'teffects aipw', type: 'command', options: [] },
                { value: 'teffects ipw', type: 'command', options: [] },
                { value: 'teffects ipwra', type: 'command', options: [] },
                { value: 'teffects multivalued', type: 'command', options: [] },
                { value: 'teffects nnmatch', type: 'command', options: [] },
                { value: 'teffects psmatch', type: 'command', options: [] },
                { value: 'teffects ra', type: 'command', options: [] },
                { value: 'telasso', type: 'command', options: [] },
                { value: 'teoverlap', type: 'command', options: [] },
                { value: 'arch', type: 'command', options: [] },
                { value: 'arfima', type: 'command', options: [] },
                { value: 'arima', type: 'command', options: [] },
                { value: 'corrgram', type: 'command', options: [] },
                { value: 'cumsp', type: 'command', options: [] },
                { value: 'dfactor', type: 'command', options: [] },
                { value: 'dfgls', type: 'command', options: [] },
                { value: 'dfuller', type: 'command', options: [] },
                { value: 'estat acplot', type: 'command', options: [] },
                { value: 'estat aroots', type: 'command', options: [] },
                { value: 'estat sbcusum', type: 'command', options: [] },
                { value: 'estat sbknown', type: 'command', options: [] },
                { value: 'estat sbsingle', type: 'command', options: [] },
                { value: 'fcast compute', type: 'command', options: [] },
                { value: 'fcast graph', type: 'command', options: [] },
                { value: 'forecast', type: 'command', options: [] },
                { value: 'forecast adjust', type: 'command', options: [] },
                { value: 'forecast clear', type: 'command', options: [] },
                { value: 'forecast coefvector', type: 'command', options: [] },
                { value: 'forecast create', type: 'command', options: [] },
                { value: 'forecast describe', type: 'command', options: [] },
                { value: 'forecast drop', type: 'command', options: [] },
                { value: 'forecast estimates', type: 'command', options: [] },
                { value: 'forecast exogenous', type: 'command', options: [] },
                { value: 'forecast identity', type: 'command', options: [] },
                { value: 'forecast list', type: 'command', options: [] },
                { value: 'forecast query', type: 'command', options: [] },
                { value: 'forecast solve', type: 'command', options: [] },
                { value: 'irf', type: 'command', options: [] },
                { value: 'irf add', type: 'command', options: [] },
                { value: 'irf cgraph', type: 'command', options: [] },
                { value: 'irf create', type: 'command', options: [] },
                { value: 'irf ctable', type: 'command', options: [] },
                { value: 'irf describe', type: 'command', options: [] },
                { value: 'irf drop', type: 'command', options: [] },
                { value: 'irf graph', type: 'command', options: [] },
                { value: 'irf ograph', type: 'command', options: [] },
                { value: 'irf rename', type: 'command', options: [] },
                { value: 'irf set', type: 'command', options: [] },
                { value: 'irf table', type: 'command', options: [] },
                { value: 'mgarch', type: 'command', options: [] },
                { value: 'mgarch ccc', type: 'command', options: [] },
                { value: 'mgarch dcc', type: 'command', options: [] },
                { value: 'mgarch dvech', type: 'command', options: [] },
                { value: 'mgarch vcc', type: 'command', options: [] },
                { value: 'mswitch', type: 'command', options: [] },
                { value: 'newey', type: 'command', options: [] },
                { value: 'pergram', type: 'command', options: [] },
                { value: 'pperron', type: 'command', options: [] },
                { value: 'prais', type: 'command', options: [] },
                { value: 'psdensity', type: 'command', options: [] },
                { value: 'rolling', type: 'command', options: [] },
                { value: 'sspace', type: 'command', options: [] },
                { value: 'threshold', type: 'command', options: [] },
                { value: 'tsappend', type: 'command', options: [] },
                { value: 'tsfill', type: 'command', options: [] },
                { value: 'tsfilter', type: 'command', options: [] },
                { value: 'tsfilter bk', type: 'command', options: [] },
                { value: 'tsfilter bw', type: 'command', options: [] },
                { value: 'tsfilter cf', type: 'command', options: [] },
                { value: 'tsfilter hp', type: 'command', options: [] },
                { value: 'tsline', type: 'command', options: [] },
                { value: 'tsreport', type: 'command', options: [] },
                { value: 'tsrevar', type: 'command', options: [] },
                { value: 'tsset', type: 'command', options: [] },
                { value: 'tssmooth', type: 'command', options: [] },
                { value: 'tssmooth dexponential', type: 'command', options: [] },
                { value: 'tssmooth exponential', type: 'command', options: [] },
                { value: 'tssmooth hwinters', type: 'command', options: [] },
                { value: 'tssmooth ma', type: 'command', options: [] },
                { value: 'tssmooth nl', type: 'command', options: [] },
                { value: 'tssmooth shwinters', type: 'command', options: [] },
                { value: 'ucm', type: 'command', options: [] },
                { value: 'var intro', type: 'command', options: [] },
                { value: 'var', type: 'command', options: [] },
                { value: 'var svar', type: 'command', options: [] },
                { value: 'varbasic', type: 'command', options: [] },
                { value: 'vargranger', type: 'command', options: [] },
                { value: 'varlmar', type: 'command', options: [] },
                { value: 'varnorm', type: 'command', options: [] },
                { value: 'varsoc', type: 'command', options: [] },
                { value: 'varstable', type: 'command', options: [] },
                { value: 'varwle', type: 'command', options: [] },
                { value: 'vec intro', type: 'command', options: [] },
                { value: 'vec', type: 'command', options: [] },
                { value: 'veclmar', type: 'command', options: [] },
                { value: 'vecnorm', type: 'command', options: [] },
                { value: 'vecrank', type: 'command', options: [] },
                { value: 'vecstable', type: 'command', options: [] },
                { value: 'wntestb', type: 'command', options: [] },
                { value: 'wntestq', type: 'command', options: [] },
                { value: 'xcorr', type: 'command', options: [] },
                { value: 'xt', type: 'command', options: [] },
                { value: 'quadchk', type: 'command', options: [] },
                { value: 'xtabond', type: 'command', options: [] },
                { value: 'xtcloglog', type: 'command', options: [] },
                { value: 'xtcointtest', type: 'command', options: [] },
                { value: 'xtdata', type: 'command', options: [] },
                { value: 'xtdescribe', type: 'command', options: [] },
                { value: 'xtdidregress', type: 'command', options: [] },
                { value: 'xtdpd', type: 'command', options: [] },
                { value: 'xtdpdsys', type: 'command', options: [] },
                { value: 'xteintreg', type: 'command', options: [] },
                { value: 'xteoprobit', type: 'command', options: [] },
                { value: 'xteprobit', type: 'command', options: [] },
                { value: 'xteregress', type: 'command', options: [] },
                { value: 'xtfrontier', type: 'command', options: [] },
                { value: 'xtgee', type: 'command', options: [] },
                { value: 'xtgls', type: 'command', options: [] },
                { value: 'xtheckman', type: 'command', options: [] },
                { value: 'xthtaylor', type: 'command', options: [] },
                { value: 'xtintreg', type: 'command', options: [] },
                { value: 'xtivreg', type: 'command', options: [] },
                { value: 'xtline', type: 'command', options: [] },
                { value: 'xtlogit', type: 'command', options: [] },
                { value: 'xtmlogit', type: 'command', options: [] },
                { value: 'xtnbreg', type: 'command', options: [] },
                { value: 'xtologit', type: 'command', options: [] },
                { value: 'xtoprobit', type: 'command', options: [] },
                { value: 'xtpcse', type: 'command', options: [] },
                { value: 'xtpoisson', type: 'command', options: [] },
                { value: 'xtprobit', type: 'command', options: [] },
                { value: 'xtrc', type: 'command', options: [] },
                { value: 'xtreg', type: 'command', options: [] },
                { value: 'xtregar', type: 'command', options: [] },
                { value: 'xtset', type: 'command', options: [] },
                { value: 'xtstreg', type: 'command', options: [] },
                { value: 'xtsum', type: 'command', options: [] },
                { value: 'xttab', type: 'command', options: [] },
                { value: 'xttobit', type: 'command', options: [] },
                { value: 'xtunitroot', type: 'command', options: [] },
            ]
        }
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dictionnary);


/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _jupyterlab_completer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/completer */ "webpack/sharing/consume/default/@jupyterlab/completer");
/* harmony import */ var _jupyterlab_completer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_completer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/notebook */ "webpack/sharing/consume/default/@jupyterlab/notebook");
/* harmony import */ var _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _jupyterlab_console__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/console */ "webpack/sharing/consume/default/@jupyterlab/console");
/* harmony import */ var _jupyterlab_console__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_console__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _connector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./connector */ "./lib/connector.js");
/* harmony import */ var _customconnector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./customconnector */ "./lib/customconnector.js");





/**
 * The command IDs used by the console plugin.
 */
var CommandIDs;
(function (CommandIDs) {
    CommandIDs.invoke = 'completer:invoke';
    CommandIDs.invokeNotebook = 'sos_completer:invoke-notebook';
    CommandIDs.select = 'completer:select';
    CommandIDs.selectNotebook = 'sos_completer:select-notebook';
})(CommandIDs || (CommandIDs = {}));
/**
 * Initialization data for the extension.
 */
const extension = {
    id: 'sos_completer',
    autoStart: true,
    requires: [_jupyterlab_completer__WEBPACK_IMPORTED_MODULE_0__.ICompletionManager, _jupyterlab_notebook__WEBPACK_IMPORTED_MODULE_1__.INotebookTracker, _jupyterlab_console__WEBPACK_IMPORTED_MODULE_2__.IConsoleTracker],
    activate: async (app, completionManager, notebooks, consoles) => {
        console.log('JupyterLab custom completer extension is activated!');
        // Modelled after completer-extension's notebooks plugin
        notebooks.widgetAdded.connect((sender, panel) => {
            var _a, _b;
            let editor = (_b = (_a = panel.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor) !== null && _b !== void 0 ? _b : null;
            const session = panel.sessionContext.session;
            const sessionCtx = panel.sessionContext;
            const options = { session, sessionCtx, editor };
            const connector = new _connector__WEBPACK_IMPORTED_MODULE_3__.CompletionConnector([]);
            const handler = completionManager.register({
                connector,
                editor,
                parent: panel,
            });
            const updateConnector = () => {
                var _a, _b;
                editor = (_b = (_a = panel.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor) !== null && _b !== void 0 ? _b : null;
                options.session = panel.sessionContext.session;
                options.sessionCtx = panel.sessionContext;
                options.editor = editor;
                handler.editor = editor;
                const kernel = new _jupyterlab_completer__WEBPACK_IMPORTED_MODULE_0__.KernelConnector(options);
                const context = new _jupyterlab_completer__WEBPACK_IMPORTED_MODULE_0__.ContextConnector(options);
                const custom = new _customconnector__WEBPACK_IMPORTED_MODULE_4__.CustomConnector(options, notebooks, consoles);
                let cur_kernel = panel.context.sessionContext.kernelPreference.name ||
                    panel.context.sessionContext.kernelDisplayName;
                // let's skip the KernelConnector for Stata (this seems to lock the kernel)
                // @TODO: implement auto-completion from within stata_kernel
                if (cur_kernel.toLowerCase() === "stata") {
                    handler.connector = new _connector__WEBPACK_IMPORTED_MODULE_3__.CompletionConnector([
                        kernel,
                        context,
                        custom,
                    ]);
                }
                else {
                    handler.connector = new _connector__WEBPACK_IMPORTED_MODULE_3__.CompletionConnector([
                        kernel,
                        context,
                        custom,
                    ]);
                }
            };
            // Update the handler whenever the prompt or session changes
            panel.content.activeCellChanged.connect(updateConnector);
            panel.sessionContext.sessionChanged.connect(updateConnector);
        });
        // Add notebook completer command.
        app.commands.addCommand(CommandIDs.invokeNotebook, {
            execute: () => {
                var _a;
                const panel = notebooks.currentWidget;
                if (panel && ((_a = panel.content.activeCell) === null || _a === void 0 ? void 0 : _a.model.type) === 'code') {
                    return app.commands.execute(CommandIDs.invoke, { id: panel.id });
                }
            },
        });
        // Add notebook completer select command.
        app.commands.addCommand(CommandIDs.selectNotebook, {
            execute: () => {
                const id = notebooks.currentWidget && notebooks.currentWidget.id;
                if (id) {
                    return app.commands.execute(CommandIDs.select, { id });
                }
            },
        });
        // Set enter key for notebook completer select command.
        app.commands.addKeyBinding({
            command: CommandIDs.selectNotebook,
            keys: ['Enter'],
            selector: '.jp-Notebook .jp-mod-completer-active',
        });
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (extension);


/***/ })

}]);
//# sourceMappingURL=lib_index_js.51c28d2a460c7714425d.js.map